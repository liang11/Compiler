
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import RegistroSemantico.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\046\002\000\002\002" +
    "\004\000\002\003\007\000\002\003\006\000\002\014\004" +
    "\000\002\014\003\000\002\045\003\000\002\045\003\000" +
    "\002\036\004\000\002\036\004\000\002\010\004\000\002" +
    "\010\002\000\002\015\007\000\002\047\002\000\002\015" +
    "\005\000\002\015\002\000\002\011\004\000\002\011\002" +
    "\000\002\050\002\000\002\016\006\000\002\051\002\000" +
    "\002\052\002\000\002\053\002\000\002\016\012\000\002" +
    "\054\002\000\002\016\005\000\002\016\002\000\002\055" +
    "\002\000\002\004\007\000\002\004\004\000\002\004\002" +
    "\000\002\056\002\000\002\057\002\000\002\060\002\000" +
    "\002\061\002\000\002\012\020\000\002\040\012\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\062\002\000\002\063\002\000" +
    "\002\021\013\000\002\064\002\000\002\021\006\000\002" +
    "\065\002\000\002\023\005\000\002\023\002\000\002\066" +
    "\002\000\002\067\002\000\002\025\011\000\002\025\003" +
    "\000\002\020\003\000\002\020\007\000\002\020\005\000" +
    "\002\070\002\000\002\024\006\000\002\024\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\006\005\000" +
    "\002\071\002\000\002\006\005\000\002\072\002\000\002" +
    "\026\006\000\002\026\003\000\002\032\004\000\002\017" +
    "\003\000\002\017\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\037\003\000" +
    "\002\073\002\000\002\037\006\000\002\037\004\000\002" +
    "\037\004\000\002\034\003\000\002\034\005\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\031\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\002\000\002\035\006\000\002\030\004\000\002\030\003" +
    "\000\002\041\007\000\002\041\006\000\002\042\007\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\005\000\002\044\003\000\002\027\007\000\002\027" +
    "\011\000\002\074\002\000\002\027\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\015\000\001\002\000\004\015\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\016\003\ufff5\014\ufff5\016\ufff5\022\014\035\ufff5\066" +
    "\ufff5\001\002\000\004\002\uffff\001\002\000\006\003\013" +
    "\021\012\001\002\000\016\003\ufff8\014\ufff8\016\ufff8\022" +
    "\ufff8\035\ufff8\066\ufff8\001\002\000\016\003\ufff7\014\ufff7" +
    "\016\ufff7\022\ufff7\035\ufff7\066\ufff7\001\002\000\016\003" +
    "\334\014\ufff1\016\ufff1\021\333\035\ufff1\066\ufff1\001\002" +
    "\000\014\003\uffef\014\uffef\016\016\035\uffef\066\uffef\001" +
    "\002\000\014\003\315\014\uffe6\021\314\035\uffe6\066\uffe6" +
    "\001\002\000\012\003\023\014\030\035\026\066\022\001" +
    "\002\000\012\003\ufff9\014\ufff9\035\ufff9\066\ufff9\001\002" +
    "\000\012\003\023\014\030\035\026\066\022\001\002\000" +
    "\004\021\303\001\002\000\004\013\uffb7\001\002\000\012" +
    "\003\ufffa\014\ufffa\035\ufffa\066\ufffa\001\002\000\012\003" +
    "\ufffb\014\ufffb\035\ufffb\066\ufffb\001\002\000\004\021\250" +
    "\001\002\000\004\002\ufffd\001\002\000\022\003\045\013" +
    "\uffd4\021\043\047\041\051\033\052\035\067\031\070\044" +
    "\001\002\000\004\011\242\001\002\000\004\024\241\001" +
    "\002\000\006\003\231\011\227\001\002\000\024\003\045" +
    "\013\uffd4\021\043\047\041\051\033\052\035\053\uffd4\067" +
    "\031\070\044\001\002\000\006\003\207\021\205\001\002" +
    "\000\004\024\204\001\002\000\024\003\045\013\uffd4\021" +
    "\043\047\041\051\033\052\035\053\uffd4\067\031\070\044" +
    "\001\002\000\024\003\045\013\uffd4\021\043\047\041\051" +
    "\033\052\035\053\uffd4\067\031\070\044\001\002\000\004" +
    "\011\161\001\002\000\004\013\160\001\002\000\006\011" +
    "\062\055\uffb5\001\002\000\004\011\050\001\002\000\026" +
    "\003\uff87\013\uff87\021\uff87\024\uffb3\047\uff87\051\uff87\052" +
    "\uff87\053\uff87\067\uff87\070\uff87\001\002\000\024\003\045" +
    "\013\uffd4\021\043\047\041\051\033\052\035\053\uffd4\067" +
    "\031\070\044\001\002\000\006\013\uffd5\053\uffd5\001\002" +
    "\000\010\017\055\020\052\021\051\001\002\000\006\012" +
    "\uff82\025\uff82\001\002\000\006\012\uff81\025\uff81\001\002" +
    "\000\006\012\uff7f\025\060\001\002\000\004\012\056\001" +
    "\002\000\006\012\uff83\025\uff83\001\002\000\004\024\057" +
    "\001\002\000\024\003\uff84\013\uff84\021\uff84\047\uff84\051" +
    "\uff84\052\uff84\053\uff84\067\uff84\070\uff84\001\002\000\010" +
    "\017\055\020\052\021\051\001\002\000\004\012\uff80\001" +
    "\002\000\022\003\121\011\124\012\uff8a\017\070\020\073" +
    "\021\072\061\115\062\114\001\002\000\004\055\064\001" +
    "\002\000\040\004\107\005\066\006\075\007\103\010\077" +
    "\017\070\020\073\021\072\057\104\060\100\061\101\062" +
    "\074\063\105\064\071\065\065\001\002\000\046\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\012\uff92\017\uff92\020" +
    "\uff92\021\uff92\024\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\001\002\000\046\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\012\uff96\017\uff96" +
    "\020\uff96\021\uff96\024\uff96\056\uff96\057\uff96\060\uff96\061" +
    "\uff96\062\uff96\063\uff96\064\uff96\065\uff96\001\002\000\040" +
    "\004\107\005\066\006\075\007\103\010\077\012\uffab\024" +
    "\uffab\056\uffab\057\104\060\100\061\101\062\074\063\105" +
    "\064\071\065\065\001\002\000\066\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\012\uffac\023\uffac\024\uffac\025\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\054\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\001\002\000\046\004" +
    "\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\024\uff8e\056\uff8e\057\uff8e\060\uff8e\061" +
    "\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\001\002\000\070" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\062\012" +
    "\uffae\023\uffae\024\uffae\025\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\054\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae" +
    "\065\uffae\001\002\000\066\004\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\012\uffaf\023\uffaf\024\uffaf\025\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\054\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\001\002\000\046\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\012\uff98\017\uff98\020\uff98" +
    "\021\uff98\024\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\063\uff98\064\uff98\065\uff98\001\002\000\046\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\012\uff95\017\uff95\020" +
    "\uff95\021\uff95\024\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\001\002\000\010\017" +
    "\070\020\073\021\072\001\002\000\046\004\uff93\005\uff93" +
    "\006\uff93\007\uff93\010\uff93\012\uff93\017\uff93\020\uff93\021" +
    "\uff93\024\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93" +
    "\063\uff93\064\uff93\065\uff93\001\002\000\046\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\010\uff90\012\uff90\017\uff90\020\uff90" +
    "\021\uff90\024\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062" +
    "\uff90\063\uff90\064\uff90\065\uff90\001\002\000\046\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\010\uff99\012\uff99\017\uff99\020" +
    "\uff99\021\uff99\024\uff99\056\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\063\uff99\064\uff99\065\uff99\001\002\000\006\024" +
    "\uffb4\056\uffb4\001\002\000\046\004\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\012\uff94\017\uff94\020\uff94\021\uff94\024" +
    "\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94" +
    "\064\uff94\065\uff94\001\002\000\046\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\012\uff91\017\uff91\020\uff91\021\uff91" +
    "\024\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\064\uff91\065\uff91\001\002\000\046\004\uff8f\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\012\uff8f\017\uff8f\020\uff8f\021" +
    "\uff8f\024\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f" +
    "\063\uff8f\064\uff8f\065\uff8f\001\002\000\066\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\012\uffad\023\uffad\024\uffad" +
    "\025\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\054\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\001\002\000" +
    "\046\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\012\uff97" +
    "\017\uff97\020\uff97\021\uff97\024\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\001\002" +
    "\000\010\012\uffa7\024\uffa7\056\uffa7\001\002\000\046\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffa8\017\uffaa" +
    "\020\uffaa\021\uffaa\024\uffa8\056\uffa8\057\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\001\002\000\040" +
    "\004\107\005\066\006\075\007\103\010\077\017\070\020" +
    "\073\021\072\057\104\060\100\061\101\062\074\063\105" +
    "\064\071\065\065\001\002\000\010\012\uffa9\024\uffa9\056" +
    "\uffa9\001\002\000\010\017\070\020\073\021\072\001\002" +
    "\000\010\017\070\020\073\021\072\001\002\000\026\012" +
    "\uff8c\023\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\001\002\000\004\012\uff8b\001" +
    "\002\000\004\012\uffc7\001\002\000\004\012\uffc2\001\002" +
    "\000\004\012\155\001\002\000\060\004\107\005\066\006" +
    "\075\007\103\010\077\012\uffa6\023\uffa6\025\153\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\057\104\060\100\061\130\062\131\063\105\064\071" +
    "\065\065\001\002\000\016\003\121\017\070\020\073\021" +
    "\072\061\115\062\114\001\002\000\024\023\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\001\002\000\004\012\134\001\002\000\056\004\107" +
    "\005\066\006\075\007\103\010\077\012\uffa6\023\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\057\104\060\100\061\130\062\131\063\105\064" +
    "\071\065\065\001\002\000\040\012\uffa2\017\uff99\020\uff99" +
    "\021\uff99\023\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\061\uff99\062\uff99\001\002" +
    "\000\040\012\uffa1\017\uff98\020\uff98\021\uff98\023\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\061\uff98\062\uff98\001\002\000\014\017\070\020" +
    "\073\021\072\061\115\062\114\001\002\000\026\012\uffa5" +
    "\023\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\001\002\000\026\012\uffc5\023\140" +
    "\037\137\040\142\041\146\042\136\043\144\044\145\045" +
    "\135\046\143\001\002\000\020\003\uffba\011\uffba\017\uffba" +
    "\020\uffba\021\uffba\061\uffba\062\uffba\001\002\000\020\003" +
    "\uffbd\011\uffbd\017\uffbd\020\uffbd\021\uffbd\061\uffbd\062\uffbd" +
    "\001\002\000\020\003\uffc0\011\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\061\uffc0\062\uffc0\001\002\000\020\003\uffc1\011\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\061\uffc1\062\uffc1\001\002\000" +
    "\020\003\121\011\124\017\070\020\073\021\072\061\115" +
    "\062\114\001\002\000\020\003\uffbf\011\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\061\uffbf\062\uffbf\001\002\000\020\003\uffb9" +
    "\011\uffb9\017\uffb9\020\uffb9\021\uffb9\061\uffb9\062\uffb9\001" +
    "\002\000\020\003\uffbc\011\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\061\uffbc\062\uffbc\001\002\000\020\003\uffbb\011\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\061\uffbb\062\uffbb\001\002\000\020" +
    "\003\uffbe\011\uffbe\017\uffbe\020\uffbe\021\uffbe\061\uffbe\062" +
    "\uffbe\001\002\000\004\012\uffc6\001\002\000\024\023\140" +
    "\037\137\040\142\041\146\042\136\043\144\044\145\045" +
    "\135\046\143\001\002\000\014\017\070\020\073\021\072" +
    "\061\115\062\114\001\002\000\004\012\uffc3\001\002\000" +
    "\022\003\121\011\124\012\uff8a\017\070\020\073\021\072" +
    "\061\115\062\114\001\002\000\004\012\uff8d\001\002\000" +
    "\066\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89" +
    "\023\uff89\024\uff89\025\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\054\uff89\056\uff89" +
    "\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065" +
    "\uff89\001\002\000\026\012\uffa4\023\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\001" +
    "\002\000\026\012\uffa3\023\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\001\002\000" +
    "\034\002\uffb8\003\uffb8\013\uffb8\014\uffb8\021\uffb8\035\uffb8" +
    "\047\uffb8\051\uffb8\052\uffb8\053\uffb8\066\uffb8\067\uffb8\070" +
    "\uffb8\001\002\000\020\003\164\011\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\061\uffd3\062\uffd3\001\002\000\024\003\045\013" +
    "\uffd4\021\043\047\041\051\033\052\035\053\uffd4\067\031" +
    "\070\044\001\002\000\006\013\uffdb\053\uffdb\001\002\000" +
    "\004\013\uffd0\001\002\000\020\003\121\011\124\017\070" +
    "\020\073\021\072\061\115\062\114\001\002\000\004\012" +
    "\167\001\002\000\004\050\uffd2\001\002\000\004\050\171" +
    "\001\002\000\024\003\045\013\uffd4\021\043\047\041\051" +
    "\033\052\035\053\uffd4\067\031\070\044\001\002\000\006" +
    "\013\uffcc\053\173\001\002\000\022\003\uffce\013\uffce\021" +
    "\uffce\047\uffce\051\uffce\052\uffce\067\uffce\070\uffce\001\002" +
    "\000\004\013\175\001\002\000\024\003\uffd1\013\uffd1\021" +
    "\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\067\uffd1\070\uffd1" +
    "\001\002\000\022\003\045\013\uffd4\021\043\047\041\051" +
    "\033\052\035\067\031\070\044\001\002\000\004\013\uffcd" +
    "\001\002\000\004\013\201\001\002\000\024\003\uffcf\013" +
    "\uffcf\021\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\067\uffcf" +
    "\070\uffcf\001\002\000\006\013\uffd8\053\uffd8\001\002\000" +
    "\006\013\uffd7\053\uffd7\001\002\000\024\003\uff88\013\uff88" +
    "\021\uff88\047\uff88\051\uff88\052\uff88\053\uff88\067\uff88\070" +
    "\uff88\001\002\000\004\055\uffb5\001\002\000\004\056\212" +
    "\001\002\000\004\056\uffb3\001\002\000\024\003\045\013" +
    "\uffd4\021\043\047\041\051\033\052\035\053\uffd4\067\031" +
    "\070\044\001\002\000\006\013\uffd9\053\uffd9\001\002\000" +
    "\014\003\214\011\213\017\070\020\073\021\072\001\002" +
    "\000\040\004\107\005\066\006\075\007\103\010\077\017" +
    "\070\020\073\021\072\057\104\060\100\061\101\062\074" +
    "\063\105\064\071\065\065\001\002\000\006\003\uff7c\014" +
    "\uff7c\001\002\000\004\054\216\001\002\000\006\003\023" +
    "\014\030\001\002\000\024\003\uff7e\013\uff7e\021\uff7e\047" +
    "\uff7e\051\uff7e\052\uff7e\053\uff7e\067\uff7e\070\uff7e\001\002" +
    "\000\006\003\023\014\030\001\002\000\024\003\uff7b\013" +
    "\uff7b\021\uff7b\047\uff7b\051\uff7b\052\uff7b\053\uff7b\067\uff7b" +
    "\070\uff7b\001\002\000\004\012\223\001\002\000\004\054" +
    "\224\001\002\000\006\003\023\014\030\001\002\000\024" +
    "\003\uff7d\013\uff7d\021\uff7d\047\uff7d\051\uff7d\052\uff7d\053" +
    "\uff7d\067\uff7d\070\uff7d\001\002\000\006\013\uffd6\053\uffd6" +
    "\001\002\000\020\003\uffcb\011\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\061\uffcb\062\uffcb\001\002\000\024\003\045\013\uffd4" +
    "\021\043\047\041\051\033\052\035\053\uffd4\067\031\070" +
    "\044\001\002\000\024\003\uffc8\013\uffc8\021\uffc8\047\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\067\uffc8\070\uffc8\001\002\000" +
    "\006\013\uffda\053\uffda\001\002\000\020\003\121\011\124" +
    "\017\070\020\073\021\072\061\115\062\114\001\002\000" +
    "\004\012\uffca\001\002\000\004\012\236\001\002\000\004" +
    "\054\237\001\002\000\006\003\023\014\030\001\002\000" +
    "\024\003\uffc9\013\uffc9\021\uffc9\047\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\067\uffc9\070\uffc9\001\002\000\024\003\uffb2\013" +
    "\uffb2\021\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\067\uffb2" +
    "\070\uffb2\001\002\000\006\012\244\021\243\001\002\000" +
    "\004\012\246\001\002\000\004\024\245\001\002\000\024" +
    "\003\uff85\013\uff85\021\uff85\047\uff85\051\uff85\052\uff85\053" +
    "\uff85\067\uff85\070\uff85\001\002\000\004\024\247\001\002" +
    "\000\024\003\uff86\013\uff86\021\uff86\047\uff86\051\uff86\052" +
    "\uff86\053\uff86\067\uff86\070\uff86\001\002\000\004\011\uffe1" +
    "\001\002\000\004\011\252\001\002\000\022\012\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\001\002\000\022\012\uffe2\026\257\027\264\030\255\031" +
    "\256\032\263\033\261\034\262\001\002\000\004\021\275" +
    "\001\002\000\016\003\uff9e\014\uff9e\016\uff9e\021\uff9e\022" +
    "\uff9e\024\uff9e\001\002\000\016\003\uff9d\014\uff9d\016\uff9d" +
    "\021\uff9d\022\uff9d\024\uff9d\001\002\000\016\003\uffa0\014" +
    "\uffa0\016\uffa0\021\uffa0\022\uffa0\024\uffa0\001\002\000\004" +
    "\012\265\001\002\000\016\003\uff9b\014\uff9b\016\uff9b\021" +
    "\uff9b\022\uff9b\024\uff9b\001\002\000\016\003\uff9a\014\uff9a" +
    "\016\uff9a\021\uff9a\022\uff9a\024\uff9a\001\002\000\016\003" +
    "\uff9c\014\uff9c\016\uff9c\021\uff9c\022\uff9c\024\uff9c\001\002" +
    "\000\016\003\uff9f\014\uff9f\016\uff9f\021\uff9f\022\uff9f\024" +
    "\uff9f\001\002\000\004\036\uffdf\001\002\000\004\036\267" +
    "\001\002\000\020\026\257\027\264\030\255\031\256\032" +
    "\263\033\261\034\262\001\002\000\012\003\uffde\014\uffde" +
    "\016\uffde\022\uffde\001\002\000\012\003\ufff5\014\ufff5\016" +
    "\ufff5\022\014\001\002\000\010\003\uffef\014\uffef\016\016" +
    "\001\002\000\006\003\023\014\030\001\002\000\012\003" +
    "\uffdd\014\uffdd\035\uffdd\066\uffdd\001\002\000\006\012\uffe3" +
    "\025\uffe5\001\002\000\004\025\277\001\002\000\022\012" +
    "\uffe2\026\257\027\264\030\255\031\256\032\263\033\261" +
    "\034\262\001\002\000\004\012\uffe4\001\002\000\004\013" +
    "\302\001\002\000\034\002\uffb6\003\uffb6\013\uffb6\014\uffb6" +
    "\021\uffb6\035\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\001\002\000\004\011\304\001\002" +
    "\000\022\012\uffe2\026\257\027\264\030\255\031\256\032" +
    "\263\033\261\034\262\001\002\000\004\012\306\001\002" +
    "\000\012\003\ufff5\014\ufff5\016\ufff5\022\014\001\002\000" +
    "\010\003\uffef\014\uffef\016\016\001\002\000\006\003\023" +
    "\014\030\001\002\000\012\003\uffdc\014\uffdc\035\uffdc\066" +
    "\uffdc\001\002\000\004\002\ufffe\001\002\000\012\003\ufffc" +
    "\014\ufffc\035\ufffc\066\ufffc\001\002\000\006\025\321\036" +
    "\uffec\001\002\000\004\024\uffe8\001\002\000\012\003\ufff0" +
    "\014\ufff0\035\ufff0\066\ufff0\001\002\000\004\024\320\001" +
    "\002\000\012\003\uffe7\014\uffe7\035\uffe7\066\uffe7\001\002" +
    "\000\014\003\uffee\014\uffee\021\uffee\035\uffee\066\uffee\001" +
    "\002\000\004\036\323\001\002\000\020\026\257\027\264" +
    "\030\255\031\256\032\263\033\261\034\262\001\002\000" +
    "\004\024\uffeb\001\002\000\004\024\326\001\002\000\014" +
    "\003\uffea\014\uffea\021\uffea\035\uffea\066\uffea\001\002\000" +
    "\014\003\315\014\uffe6\021\314\035\uffe6\066\uffe6\001\002" +
    "\000\012\003\uffe9\014\uffe9\035\uffe9\066\uffe9\001\002\000" +
    "\014\003\315\014\uffe6\021\314\035\uffe6\066\uffe6\001\002" +
    "\000\012\003\uffed\014\uffed\035\uffed\066\uffed\001\002\000" +
    "\004\023\340\001\002\000\004\024\ufff3\001\002\000\014" +
    "\003\ufff6\014\ufff6\016\ufff6\035\ufff6\066\ufff6\001\002\000" +
    "\004\024\337\001\002\000\014\003\ufff2\014\ufff2\016\ufff2" +
    "\035\ufff2\066\ufff2\001\002\000\006\017\343\020\341\001" +
    "\002\000\004\024\uffb1\001\002\000\004\024\344\001\002" +
    "\000\004\024\uffb0\001\002\000\016\003\334\014\ufff1\016" +
    "\ufff1\021\333\035\ufff1\066\ufff1\001\002\000\014\003\ufff4" +
    "\014\ufff4\016\ufff4\035\ufff4\066\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\004\046\003\001\001\000\006\003" +
    "\007\036\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\334" +
    "\001\001\000\004\011\016\001\001\000\004\016\315\001" +
    "\001\000\014\006\026\012\023\014\020\040\017\045\024" +
    "\001\001\000\002\001\001\000\012\006\311\012\023\040" +
    "\017\045\312\001\001\000\002\001\001\000\004\071\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\041\026\031\030\036" +
    "\032\037\035\035\041\033\042\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\227\001\001\000\020" +
    "\013\225\026\031\030\036\032\037\035\035\041\033\042" +
    "\045\001\001\000\006\026\205\027\207\001\001\000\002" +
    "\001\001\000\020\013\202\026\031\030\036\032\037\035" +
    "\035\041\033\042\045\001\001\000\020\013\201\026\031" +
    "\030\036\032\037\035\035\041\033\042\045\001\001\000" +
    "\004\021\161\001\001\000\002\001\001\000\004\072\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\046\026\031\030\036\032\037\035\035\041\033\042\045" +
    "\001\001\000\002\001\001\000\006\043\052\044\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\052\044\060\001\001\000\002" +
    "\001\001\000\016\020\116\022\122\024\117\031\121\034" +
    "\115\035\105\001\001\000\002\001\001\000\012\022\066" +
    "\033\075\035\105\037\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\107\035\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\111\001\001\000\012\022\066" +
    "\033\075\035\105\037\112\001\001\000\002\001\001\000" +
    "\006\022\156\035\105\001\001\000\006\022\155\035\105" +
    "\001\001\000\004\070\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\131\001\001\000\012\022\126\024\125\034\124\035" +
    "\105\001\001\000\004\070\147\001\001\000\002\001\001" +
    "\000\004\033\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\126\034\132\035\105\001\001\000\002" +
    "\001\001\000\004\007\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\146\022\126\024\117\034\124\035\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\150\001\001\000\010\022\126\034\151\035\105\001\001" +
    "\000\002\001\001\000\016\020\116\022\122\024\117\031" +
    "\153\034\115\035\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\164\001\001\000\020\013\162\026\031" +
    "\030\036\032\037\035\035\041\033\042\045\001\001\000" +
    "\002\001\001\000\004\064\177\001\001\000\014\020\165" +
    "\022\126\024\117\034\124\035\105\001\001\000\002\001" +
    "\001\000\004\063\167\001\001\000\002\001\001\000\020" +
    "\013\171\026\031\030\036\032\037\035\035\041\033\042" +
    "\045\001\001\000\004\023\173\001\001\000\004\065\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\176\026\031\030\036\032\037\035\035\041\033\042\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\210\026\031\030\036\032\037\035\035" +
    "\041\033\042\045\001\001\000\002\001\001\000\006\022" +
    "\214\035\105\001\001\000\012\022\066\033\075\035\105" +
    "\037\221\001\001\000\004\074\217\001\001\000\002\001" +
    "\001\000\004\006\216\001\001\000\002\001\001\000\004" +
    "\006\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\232\001\001\000\020\013" +
    "\231\026\031\030\036\032\037\035\035\041\033\042\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\233\022\126\024\117\034\124\035\105\001\001\000\004" +
    "\067\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\250\001\001\000\002\001\001\000\004\057\252\001" +
    "\001\000\006\004\257\005\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\265\001\001\000" +
    "\002\001\001\000\004\005\267\001\001\000\004\061\270" +
    "\001\001\000\004\010\271\001\001\000\004\011\272\001" +
    "\001\000\004\006\273\001\001\000\002\001\001\000\004" +
    "\055\275\001\001\000\002\001\001\000\006\004\277\005" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\304\005\253\001" +
    "\001\000\002\001\001\000\004\010\306\001\001\000\004" +
    "\011\307\001\001\000\004\006\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\321" +
    "\001\001\000\004\054\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\330\001\001" +
    "\000\002\001\001\000\004\005\323\001\001\000\004\052" +
    "\324\001\001\000\002\001\001\000\004\053\326\001\001" +
    "\000\004\016\327\001\001\000\002\001\001\000\004\016" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\344\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int error_sync_size(){return 1;}
    public String resultado = "";
    public String ambito = "Global";
    public static LinkedList<TError> tablaES = new LinkedList<TError>();
    public static LinkedList<Error_Semantico> error_semantico = new LinkedList<Error_Semantico>();
    public static LinkedList<String> pila_semantica = new LinkedList<String>();
    public static LinkedList<Nodo_Variable> tabla_simbolos = new LinkedList<Nodo_Variable>();
    public static String codigoEnsamblador = "";

    //Metodo al que se llama solo en caso de un error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;

        //System.out.println("Error sintactico Recuperado!");
        //System.out.println("\tToken: " + lexema);
        //System.out.println("\tFila: " + fila);
        
        TError  datos = new TError(lexema, fila);
        tablaES.add(datos);
    }

    //Metodo al que se llama solo en caso que no se pueda recuperar del error
    public void unrecovered_syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;

        //System.out.println("Error sintactico, No es posible recuperacion!");
        //System.out.println("\tToken: " + lexema);
        //System.out.println("\tFila: " + fila);

        TError  datos = new TError(lexema, fila);
        tablaES.add(datos);
    }

    public void agregarError(String lexema, int fila){
        TError error = new TError(lexema, fila);
        tablaES.add(error);
        //System.out.println(error.toString());
    }

    public void meter_variables(){
        if(pila_semantica.size()>0){
            String tipo = pila_semantica.pop();
            int temp = pila_semantica.size();
            while(temp > 0){
                if(!existe(pila_semantica.getFirst())){
                    Nodo_Variable temp1 = new Nodo_Variable(pila_semantica.pop(), tipo, ambito);
                    tabla_simbolos.add(temp1);
                    System.out.println(temp1.toString());
                } else{
                    error_semantico.add(new Error_Semantico("Variable doblemente definida",pila_semantica.pop()));
                }
                temp--;
            }
        }
    }

    public void meter_parametro(){
        while(!pila_semantica.getFirst().equals("(")){
            if((!existe(pila_semantica.getFirst())) && (verificar_param())){
                Nodo_Variable temp = new Nodo_Variable(pila_semantica.pop(), pila_semantica.pop(), ambito);
                tabla_simbolos.add(temp);
            } else{
                pila_semantica.pop();
            }
        }
        pila_semantica.pop();
    }
    
    public boolean verificar_param(){
        for (Nodo_Variable nodo : tabla_simbolos){
            if(nodo.getId().equals(ambito)){return false;}
        }
        return true;
    }

    public boolean existe(String id){
        for (Nodo_Variable nodo : tabla_simbolos) {
            if(nodo.getId().equals(id)){System.out.println("dio error");return true;}
        }
        return false;
    }
    
    public void imprimirEnsamblador(){
        System.out.println(codigoEnsamblador);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {


    

  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
parser.error_sync_size();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		System.out.println(tabla_simbolos.toString());System.out.println(error_semantico.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= program constantes variables procesos cuerpo 
            {
              String RESULT =null;
		parser.imprimirEnsamblador();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= program constantes variables cuerpo 
            {
              String RESULT =null;
		parser.imprimirEnsamblador();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procesos ::= procesos operacion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // procesos ::= operacion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacion ::= funciones 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operacion ::= procedimientos 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= PROGRAM ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("program",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= PROGRAM error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en PROGRAM", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("program",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constantes ::= CONST def_constante 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constantes ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def_constante ::= ID IGUALAR literal PUNTO_COMA def_constante 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de CONST", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_constante ::= error NT$1 PUNTO_COMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_constante ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= VAR def_var 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
parser.pila_semantica.push(id.toString());
        RS_Identificador rsId = new RS_Identificador();
        rsId.nombre = id.toString();
        parser.codigoEnsamblador = parser.codigoEnsamblador + rsId.nombre + " db ?,?\n";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_var ::= ID COMA NT$2 def_var 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(id.toString());
        RS_Identificador rsId = new RS_Identificador();
        rsId.nombre = id.toString();
        parser.codigoEnsamblador = parser.codigoEnsamblador + rsId.nombre + " db ?,?\n";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(tp);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
meter_variables();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_var ::= ID NT$3 DOS_PUNTOS tipo_datos NT$4 PUNTO_COMA NT$5 def_var 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$6 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de VAR", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_var ::= error NT$6 PUNTO_COMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_var ::= 
            {
              String RESULT =null;
		meter_variables();parser.ambito = "Global";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(tp); parser.pila_semantica.push(id.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametro ::= tipo_datos ID NT$7 COMA parametro 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametro ::= tipo_datos ID 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.pila_semantica.push(tp); parser.pila_semantica.push(id.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametro ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.ambito = id.toString(); parser.pila_semantica.push(id.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(par.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
meter_parametro();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(tp);meter_variables();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funciones ::= FUNCTION ID NT$8 para NT$9 parametro parc NT$10 DOS_PUNTOS tipo_datos NT$11 constantes variables cuerpo 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-12)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-12)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-10)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-10)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-10)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedimientos ::= PROCEDURE ID para parametro parc constantes variables cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procedimientos",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statements ::= IF if_expression statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statements ::= WHILE while_body statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statements ::= FOR for_body statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statements ::= asignacion statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statements ::= call_funcion statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statements ::= read statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statements ::= write statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statements ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$12 ::= 
            {
              String RESULT =null;

        RS_If rs = new RS_If();
        parser.codigoEnsamblador = parser.codigoEnsamblador + rs.startlabel + ":\n";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

        RS_If rs = new RS_If();
        parser.codigoEnsamblador = parser.codigoEnsamblador + "jz " + rs.elselabel + "\n";
        RESULT = rs.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_expression ::= para NT$12 exp_booleana parc NT$13 THEN statements else_body END 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if_expression",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$14 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de IF", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_expression ::= para error NT$14 END 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if_expression",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$15 ::= 
            {
              String RESULT =null;

        RS_If rs = new RS_If();
        parser.codigoEnsamblador = parser.codigoEnsamblador + "jump " + rs.endlabel + "\n";
        parser.codigoEnsamblador = parser.codigoEnsamblador + rs.elselabel + ":\n";

    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_body ::= ELSE NT$15 statements 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        RS_If rs = new RS_If();
        if(parser.pila_semantica.size() == 0){
            parser.codigoEnsamblador = parser.codigoEnsamblador + rs.endlabel + ":\n";
        }
        RESULT = rs.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("else_body",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_body ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("else_body",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$16 ::= 
            {
              String RESULT =null;

        RS_While rs = new RS_While();
        parser.codigoEnsamblador = parser.codigoEnsamblador + rs.startlabel + ":\n";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;

        RS_While rs = new RS_While();
        parser.codigoEnsamblador = parser.codigoEnsamblador + "jz " + rs.endlabel + "\n";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_body ::= para NT$16 exp_booleana NT$17 parc DO cuerpo 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		
        RS_While rs = new RS_While();
        if(parser.pila_semantica.size() == 0){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "jump " + rs.startlabel + "\n";
            parser.codigoEnsamblador = parser.codigoEnsamblador + rs.endlabel + ":\n";
        }
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("while_body",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // while_body ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de WHILE", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("while_body",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_booleana ::= condicion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_booleana ::= para condicion parc op_booleana exp_booleana 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp_booleana ::= para condicion parc 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$18 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;

        parser.codigoEnsamblador = parser.codigoEnsamblador + "mov ax," + resultado + "\n";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion ::= expresion NT$18 op_booleana expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        parser.codigoEnsamblador = parser.codigoEnsamblador + "cmp ax," + resultado + "\n"; 
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de CONDICION", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_booleana ::= IGUALAR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_booleana ::= MAYOR_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_booleana ::= MAYOR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_booleana ::= MENOR_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_booleana ::= MENOR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_booleana ::= DIFERENTE 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_booleana ::= OR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op_booleana ::= AND 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op_booleana ::= NOT 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpo ::= BEGIN statements END 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$19 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el cuerpo", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo ::= error NT$19 END 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$20 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;

        parser.codigoEnsamblador = parser.codigoEnsamblador + "mov ax," + id + "\n";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignar ::= ID NT$20 ASIGNAR exp_aritmetrica 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		
        parser.codigoEnsamblador = parser.codigoEnsamblador + "mov " + id + ",ax" + "\n";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignar ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de ASIGNACION", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignacion ::= asignar PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= NUM 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= CADENA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // num_id ::= NUM 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.resultado=num.toString();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // num_id ::= ID 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.resultado=id2.toString();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // num_id ::= funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // num_id ::= CADENA 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.resultado=cadena.toString();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp_aritmetrica ::= num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$21 ::= 
            {
              String RESULT =null;
		int numIdleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int numIdright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String numId = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;

        if(op == "/="){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "div ax,";
        }
        if(op == "*="){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "mul ax,";
        }
        if(op == "+="){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "add ax,";
        }
        if(op == "-="){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "sub ax,";
        }
        if(op == "+"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "mov ax," + resultado + "\n";
        }
        if(op == "-"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "mov ax," + resultado + "\n";
        }
        if(op == "*"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "mov ax," + resultado + "\n";
        }
        if(op == "/"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "mov ax," + resultado + "\n";
        }
        if(op == "%"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "mov ax," + resultado + "\n";
        }
        
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp_aritmetrica ::= num_id op_aritmetricos NT$21 exp_aritmetrica 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int numIdleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int numIdright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String numId = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        if(op == "/="){
            parser.codigoEnsamblador = parser.codigoEnsamblador + resultado + "\n";
        }
        if(op == "*="){
            parser.codigoEnsamblador = parser.codigoEnsamblador + resultado + "\n";
        }
        if(op == "+="){
            parser.codigoEnsamblador = parser.codigoEnsamblador + resultado + "\n";
        }
        if(op == "-="){
            parser.codigoEnsamblador = parser.codigoEnsamblador +  resultado + "\n";
        }
        if(op == "+"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "add ax," + resultado + "\n";
        }
        if(op == "-"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "sub ax," + resultado + "\n";
        }
        if(op == "*"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "mul ax," + resultado + "\n";
        }
        if(op == "/"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "div ax," + resultado + "\n";
        }
        if(op == "%"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "mod ax," + resultado + "\n";
        }
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp_aritmetrica ::= num_id op_aritmetricos 
            {
              String RESULT =null;
		int numIdleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int numIdright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String numId = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        if(op == "++"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "inc ax\n";
        }
        if(op == "--"){
            parser.codigoEnsamblador = parser.codigoEnsamblador + "dec ax\n";
        }
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp_aritmetrica ::= op_aritmetricos num_id 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= num_id op_aritmetricos expresion 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= MAS_MAS num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= MENOS_MENOS num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= num_id MAS_MAS 
            {
              String RESULT =null;
		int numIdleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int numIdright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String numId = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= num_id MENOS_MENOS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipo_datos ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT ="BOOLEAN";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tipo_datos ::= CHAR 
            {
              String RESULT =null;
		RESULT ="CHAR";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipo_datos ::= INT 
            {
              String RESULT =null;
		RESULT ="INT";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipo_datos ::= LONGINT 
            {
              String RESULT =null;
		RESULT ="LONGINT";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tipo_datos ::= REAL 
            {
              String RESULT =null;
		RESULT ="REAL";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipo_datos ::= SHORTINT 
            {
              String RESULT =null;
		RESULT ="SHORTINT";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipo_datos ::= STRING 
            {
              String RESULT =null;
		RESULT ="STRING";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // op_aritmetricos ::= MAS_MAS 
            {
              String RESULT =null;
		RESULT ="++";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // op_aritmetricos ::= MENOS_MENOS 
            {
              String RESULT =null;
		RESULT ="--";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // op_aritmetricos ::= MAS 
            {
              String RESULT =null;
		RESULT ="+";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // op_aritmetricos ::= MENOS 
            {
              String RESULT =null;
		RESULT ="-";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // op_aritmetricos ::= MULT 
            {
              String RESULT =null;
		RESULT ="*";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op_aritmetricos ::= DIVICION 
            {
              String RESULT =null;
		RESULT ="/";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // op_aritmetricos ::= DIV 
            {
              String RESULT =null;
		RESULT ="/";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_aritmetricos ::= MOD 
            {
              String RESULT =null;
		RESULT ="%";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // op_aritmetricos ::= MAS_IGUAL 
            {
              String RESULT =null;
		RESULT ="+=";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // op_aritmetricos ::= MENOS_IGUAL 
            {
              String RESULT =null;
		RESULT ="-=";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // op_aritmetricos ::= POR_IGUAL 
            {
              String RESULT =null;
		RESULT ="*=";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // op_aritmetricos ::= DIV_IGUAL 
            {
              String RESULT =null;
		RESULT ="/=";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_param ::= num_id COMA lista_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lista_param ::= expresion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lista_param ::= exp_booleana 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lista_param ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // funcion ::= ID para lista_param parc 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // call_funcion ::= funcion PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("call_funcion",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // call_funcion ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de FUNCTION", eright);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("call_funcion",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // read ::= READ para ID parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("read",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // read ::= READ para parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("read",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // write ::= WRITE para lista_write_param parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // write_param ::= CADENA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // write_param ::= ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // write_param ::= NUM 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lista_write_param ::= write_param COMA lista_write_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_write_param",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // lista_write_param ::= write_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_write_param",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // for_body ::= asignar TO num_id DO cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // for_body ::= asignar TO para exp_aritmetrica parc DO cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$22 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de FOR, error en expresion", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // for_body ::= asignar TO error NT$22 cuerpo 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
