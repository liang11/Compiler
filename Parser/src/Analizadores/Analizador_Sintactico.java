
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\046\002\000\002\002" +
    "\004\000\002\003\007\000\002\003\006\000\002\014\004" +
    "\000\002\014\003\000\002\045\003\000\002\045\003\000" +
    "\002\036\004\000\002\036\004\000\002\010\004\000\002" +
    "\010\002\000\002\015\007\000\002\047\002\000\002\015" +
    "\005\000\002\015\002\000\002\011\004\000\002\011\002" +
    "\000\002\050\002\000\002\016\006\000\002\051\002\000" +
    "\002\052\002\000\002\053\002\000\002\016\012\000\002" +
    "\054\002\000\002\016\005\000\002\016\002\000\002\055" +
    "\002\000\002\004\007\000\002\004\004\000\002\004\002" +
    "\000\002\056\002\000\002\057\002\000\002\060\002\000" +
    "\002\061\002\000\002\012\020\000\002\040\012\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\027\007\000\002\027\011\000" +
    "\002\062\002\000\002\027\007\000\002\025\007\000\002" +
    "\025\003\000\002\021\011\000\002\063\002\000\002\021" +
    "\006\000\002\023\004\000\002\023\002\000\002\020\003" +
    "\000\002\020\007\000\002\020\005\000\002\024\005\000" +
    "\002\024\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\006\005\000\002\064\002\000\002\006\005\000" +
    "\002\026\005\000\002\026\003\000\002\032\004\000\002" +
    "\017\003\000\002\017\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\037\003" +
    "\000\002\037\005\000\002\037\004\000\002\037\004\000" +
    "\002\034\003\000\002\034\005\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\031\005\000" +
    "\002\031\003\000\002\031\003\000\002\031\002\000\002" +
    "\035\006\000\002\030\004\000\002\030\003\000\002\041" +
    "\007\000\002\041\006\000\002\042\007\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\005\000" +
    "\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\015\000\001\002\000\004\015\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\016\003\ufff5\014\ufff5\016\ufff5\022\014\035\ufff5\066" +
    "\ufff5\001\002\000\004\002\uffff\001\002\000\006\003\013" +
    "\021\012\001\002\000\016\003\ufff8\014\ufff8\016\ufff8\022" +
    "\ufff8\035\ufff8\066\ufff8\001\002\000\016\003\ufff7\014\ufff7" +
    "\016\ufff7\022\ufff7\035\ufff7\066\ufff7\001\002\000\016\003" +
    "\324\014\ufff1\016\ufff1\021\323\035\ufff1\066\ufff1\001\002" +
    "\000\014\003\uffef\014\uffef\016\016\035\uffef\066\uffef\001" +
    "\002\000\014\003\305\014\uffe6\021\304\035\uffe6\066\uffe6" +
    "\001\002\000\012\003\023\014\030\035\026\066\022\001" +
    "\002\000\012\003\ufff9\014\ufff9\035\ufff9\066\ufff9\001\002" +
    "\000\012\003\023\014\030\035\026\066\022\001\002\000" +
    "\004\021\273\001\002\000\004\013\uffb9\001\002\000\012" +
    "\003\ufffa\014\ufffa\035\ufffa\066\ufffa\001\002\000\012\003" +
    "\ufffb\014\ufffb\035\ufffb\066\ufffb\001\002\000\004\021\240" +
    "\001\002\000\004\002\ufffd\001\002\000\022\003\045\013" +
    "\uffd4\021\043\047\041\051\032\052\035\067\031\070\044" +
    "\001\002\000\004\011\232\001\002\000\006\003\224\011" +
    "\222\001\002\000\004\024\221\001\002\000\024\003\045" +
    "\013\uffd4\021\043\047\041\051\032\052\035\053\uffd4\067" +
    "\031\070\044\001\002\000\006\003\201\021\200\001\002" +
    "\000\004\024\176\001\002\000\024\003\045\013\uffd4\021" +
    "\043\047\041\051\032\052\035\053\uffd4\067\031\070\044" +
    "\001\002\000\024\003\045\013\uffd4\021\043\047\041\051" +
    "\032\052\035\053\uffd4\067\031\070\044\001\002\000\004" +
    "\011\156\001\002\000\004\013\155\001\002\000\006\011" +
    "\062\055\063\001\002\000\004\011\050\001\002\000\026" +
    "\003\uff8b\013\uff8b\021\uff8b\024\uffb6\047\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\067\uff8b\070\uff8b\001\002\000\024\003\045" +
    "\013\uffd4\021\043\047\041\051\032\052\035\053\uffd4\067" +
    "\031\070\044\001\002\000\006\013\uffd5\053\uffd5\001\002" +
    "\000\010\017\055\020\051\021\052\001\002\000\006\012" +
    "\uff85\025\uff85\001\002\000\006\012\uff86\025\uff86\001\002" +
    "\000\006\012\uff83\025\060\001\002\000\004\012\056\001" +
    "\002\000\006\012\uff87\025\uff87\001\002\000\004\024\057" +
    "\001\002\000\024\003\uff88\013\uff88\021\uff88\047\uff88\051" +
    "\uff88\052\uff88\053\uff88\067\uff88\070\uff88\001\002\000\010" +
    "\017\055\020\051\021\052\001\002\000\004\012\uff84\001" +
    "\002\000\022\003\115\011\122\012\uff8e\017\067\020\072" +
    "\021\071\061\112\062\113\001\002\000\040\004\105\005" +
    "\065\006\074\007\102\010\077\017\067\020\072\021\071" +
    "\057\103\060\076\061\100\062\073\063\104\064\070\065" +
    "\064\001\002\000\046\004\uff96\005\uff96\006\uff96\007\uff96" +
    "\010\uff96\012\uff96\017\uff96\020\uff96\021\uff96\024\uff96\056" +
    "\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96" +
    "\065\uff96\001\002\000\046\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\012\uff9a\017\uff9a\020\uff9a\021\uff9a\024\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\001\002\000\040\004\105\005\065\006\074" +
    "\007\102\010\077\012\uffae\024\uffae\056\uffae\057\103\060" +
    "\076\061\100\062\073\063\104\064\070\065\064\001\002" +
    "\000\066\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\054\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\001\002\000\046\004\uff92\005\uff92\006\uff92\007" +
    "\uff92\010\uff92\012\uff92\017\uff92\020\uff92\021\uff92\024\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\001\002\000\070\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\062\012\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\001\002\000\066" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\054\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\001\002\000\046\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\012\uff9c\017\uff9c\020\uff9c\021\uff9c\024\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\001\002\000\046\004\uff99\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\012\uff99\017\uff99\020\uff99\021\uff99\024\uff99\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99" +
    "\065\uff99\001\002\000\010\017\067\020\072\021\071\001" +
    "\002\000\046\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94" +
    "\012\uff94\017\uff94\020\uff94\021\uff94\024\uff94\056\uff94\057" +
    "\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94" +
    "\001\002\000\046\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\012\uff97\017\uff97\020\uff97\021\uff97\024\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\001\002\000\046\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\012\uff9d\017\uff9d\020\uff9d\021\uff9d\024\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\001\002\000\006\024\uffb7\056\uffb7\001\002\000" +
    "\046\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\012\uff98" +
    "\017\uff98\020\uff98\021\uff98\024\uff98\056\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\001\002" +
    "\000\046\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\012" +
    "\uff95\017\uff95\020\uff95\021\uff95\024\uff95\056\uff95\057\uff95" +
    "\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\001" +
    "\002\000\046\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\012\uff93\017\uff93\020\uff93\021\uff93\024\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93" +
    "\001\002\000\046\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\012\uff9b\017\uff9b\020\uff9b\021\uff9b\024\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\001\002\000\066\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\012\uffb0\023\uffb0\024\uffb0\025\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\054\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\001\002\000\010\012\uffab\024\uffab" +
    "\056\uffab\001\002\000\046\004\105\005\065\006\074\007" +
    "\102\010\077\012\uffac\017\067\020\072\021\071\024\uffac" +
    "\056\uffac\057\103\060\076\061\100\062\073\063\104\064" +
    "\070\065\064\001\002\000\010\012\uffad\024\uffad\056\uffad" +
    "\001\002\000\010\017\067\020\072\021\071\001\002\000" +
    "\010\017\067\020\072\021\071\001\002\000\026\012\uff90" +
    "\023\136\037\135\040\140\041\144\042\134\043\142\044" +
    "\143\045\133\046\141\001\002\000\004\012\uffc4\001\002" +
    "\000\004\012\uffc8\001\002\000\004\012\uff8f\001\002\000" +
    "\004\012\152\001\002\000\060\004\105\005\065\006\074" +
    "\007\102\010\077\012\uffaa\023\uffaa\025\150\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\057\103\060\076\061\127\062\126\063\104\064\070\065" +
    "\064\001\002\000\016\003\115\017\067\020\072\021\071" +
    "\061\112\062\113\001\002\000\024\023\136\037\135\040" +
    "\140\041\144\042\134\043\142\044\143\045\133\046\141" +
    "\001\002\000\004\012\132\001\002\000\056\004\105\005" +
    "\065\006\074\007\102\010\077\012\uffaa\023\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\057\103\060\076\061\127\062\126\063\104\064\070" +
    "\065\064\001\002\000\040\012\uffa5\017\uff9c\020\uff9c\021" +
    "\uff9c\023\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\061\uff9c\062\uff9c\001\002\000" +
    "\040\012\uffa6\017\uff9d\020\uff9d\021\uff9d\023\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\061\uff9d\062\uff9d\001\002\000\014\017\067\020\072" +
    "\021\071\061\112\062\113\001\002\000\026\012\uffa9\023" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\001\002\000\026\012\uffc6\023\136\037" +
    "\135\040\140\041\144\042\134\043\142\044\143\045\133" +
    "\046\141\001\002\000\020\003\uffbc\011\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\061\uffbc\062\uffbc\001\002\000\020\003\uffbf" +
    "\011\uffbf\017\uffbf\020\uffbf\021\uffbf\061\uffbf\062\uffbf\001" +
    "\002\000\020\003\uffc2\011\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\061\uffc2\062\uffc2\001\002\000\020\003\uffc3\011\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\061\uffc3\062\uffc3\001\002\000\020" +
    "\003\115\011\122\017\067\020\072\021\071\061\112\062" +
    "\113\001\002\000\020\003\uffc1\011\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\061\uffc1\062\uffc1\001\002\000\020\003\uffbb\011" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\061\uffbb\062\uffbb\001\002" +
    "\000\020\003\uffbe\011\uffbe\017\uffbe\020\uffbe\021\uffbe\061" +
    "\uffbe\062\uffbe\001\002\000\020\003\uffbd\011\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\061\uffbd\062\uffbd\001\002\000\020\003" +
    "\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0\061\uffc0\062\uffc0" +
    "\001\002\000\004\012\uffc7\001\002\000\014\017\067\020" +
    "\072\021\071\061\112\062\113\001\002\000\004\012\uffc5" +
    "\001\002\000\022\003\115\011\122\012\uff8e\017\067\020" +
    "\072\021\071\061\112\062\113\001\002\000\004\012\uff91" +
    "\001\002\000\066\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\012\uff8d\023\uff8d\024\uff8d\025\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\054" +
    "\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d" +
    "\064\uff8d\065\uff8d\001\002\000\026\012\uffa7\023\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\001\002\000\026\012\uffa8\023\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\001\002\000\034\002\uffba\003\uffba\013\uffba\014\uffba\021" +
    "\uffba\035\uffba\047\uffba\051\uffba\052\uffba\053\uffba\066\uffba" +
    "\067\uffba\070\uffba\001\002\000\020\003\162\011\122\017" +
    "\067\020\072\021\071\061\112\062\113\001\002\000\024" +
    "\003\045\013\uffd4\021\043\047\041\051\032\052\035\053" +
    "\uffd4\067\031\070\044\001\002\000\006\013\uffdb\053\uffdb" +
    "\001\002\000\004\012\165\001\002\000\006\012\uffc4\013" +
    "\uffcc\001\002\000\004\013\164\001\002\000\024\003\uffcb" +
    "\013\uffcb\021\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\067" +
    "\uffcb\070\uffcb\001\002\000\004\050\166\001\002\000\024" +
    "\003\045\013\uffd4\021\043\047\041\051\032\052\035\053" +
    "\uffd4\067\031\070\044\001\002\000\006\013\uffc9\053\170" +
    "\001\002\000\022\003\045\013\uffd4\021\043\047\041\051" +
    "\032\052\035\067\031\070\044\001\002\000\004\013\172" +
    "\001\002\000\024\003\uffcd\013\uffcd\021\uffcd\047\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\067\uffcd\070\uffcd\001\002\000\004" +
    "\013\uffca\001\002\000\006\013\uffd8\053\uffd8\001\002\000" +
    "\006\013\uffd7\053\uffd7\001\002\000\024\003\uff8c\013\uff8c" +
    "\021\uff8c\047\uff8c\051\uff8c\052\uff8c\053\uff8c\067\uff8c\070" +
    "\uff8c\001\002\000\004\056\204\001\002\000\004\055\063" +
    "\001\002\000\004\056\uffb6\001\002\000\024\003\045\013" +
    "\uffd4\021\043\047\041\051\032\052\035\053\uffd4\067\031" +
    "\070\044\001\002\000\006\013\uffd9\053\uffd9\001\002\000" +
    "\014\003\206\011\205\017\067\020\072\021\071\001\002" +
    "\000\040\004\105\005\065\006\074\007\102\010\077\017" +
    "\067\020\072\021\071\057\103\060\076\061\100\062\073" +
    "\063\104\064\070\065\064\001\002\000\006\003\uffd1\014" +
    "\uffd1\001\002\000\004\054\210\001\002\000\006\003\023" +
    "\014\030\001\002\000\024\003\uffd3\013\uffd3\021\uffd3\047" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\067\uffd3\070\uffd3\001\002" +
    "\000\006\003\023\014\030\001\002\000\024\003\uffd0\013" +
    "\uffd0\021\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\067\uffd0" +
    "\070\uffd0\001\002\000\004\012\215\001\002\000\004\054" +
    "\216\001\002\000\006\003\023\014\030\001\002\000\024" +
    "\003\uffd2\013\uffd2\021\uffd2\047\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\067\uffd2\070\uffd2\001\002\000\006\013\uffd6\053\uffd6" +
    "\001\002\000\024\003\uffb5\013\uffb5\021\uffb5\047\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\067\uffb5\070\uffb5\001\002\000\020" +
    "\003\115\011\122\017\067\020\072\021\071\061\112\062" +
    "\113\001\002\000\024\003\045\013\uffd4\021\043\047\041" +
    "\051\032\052\035\053\uffd4\067\031\070\044\001\002\000" +
    "\024\003\uffce\013\uffce\021\uffce\047\uffce\051\uffce\052\uffce" +
    "\053\uffce\067\uffce\070\uffce\001\002\000\006\013\uffda\053" +
    "\uffda\001\002\000\004\012\227\001\002\000\004\054\230" +
    "\001\002\000\006\003\023\014\030\001\002\000\024\003" +
    "\uffcf\013\uffcf\021\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\067\uffcf\070\uffcf\001\002\000\006\012\234\021\233\001" +
    "\002\000\004\012\236\001\002\000\004\024\235\001\002" +
    "\000\024\003\uff89\013\uff89\021\uff89\047\uff89\051\uff89\052" +
    "\uff89\053\uff89\067\uff89\070\uff89\001\002\000\004\024\237" +
    "\001\002\000\024\003\uff8a\013\uff8a\021\uff8a\047\uff8a\051" +
    "\uff8a\052\uff8a\053\uff8a\067\uff8a\070\uff8a\001\002\000\004" +
    "\011\uffe1\001\002\000\004\011\242\001\002\000\022\012" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\001\002\000\022\012\uffe2\026\247\027\254\030" +
    "\245\031\246\032\253\033\251\034\252\001\002\000\004" +
    "\021\265\001\002\000\016\003\uffa2\014\uffa2\016\uffa2\021" +
    "\uffa2\022\uffa2\024\uffa2\001\002\000\016\003\uffa1\014\uffa1" +
    "\016\uffa1\021\uffa1\022\uffa1\024\uffa1\001\002\000\016\003" +
    "\uffa4\014\uffa4\016\uffa4\021\uffa4\022\uffa4\024\uffa4\001\002" +
    "\000\004\012\255\001\002\000\016\003\uff9f\014\uff9f\016" +
    "\uff9f\021\uff9f\022\uff9f\024\uff9f\001\002\000\016\003\uff9e" +
    "\014\uff9e\016\uff9e\021\uff9e\022\uff9e\024\uff9e\001\002\000" +
    "\016\003\uffa0\014\uffa0\016\uffa0\021\uffa0\022\uffa0\024\uffa0" +
    "\001\002\000\016\003\uffa3\014\uffa3\016\uffa3\021\uffa3\022" +
    "\uffa3\024\uffa3\001\002\000\004\036\uffdf\001\002\000\004" +
    "\036\257\001\002\000\020\026\247\027\254\030\245\031" +
    "\246\032\253\033\251\034\252\001\002\000\012\003\uffde" +
    "\014\uffde\016\uffde\022\uffde\001\002\000\012\003\ufff5\014" +
    "\ufff5\016\ufff5\022\014\001\002\000\010\003\uffef\014\uffef" +
    "\016\016\001\002\000\006\003\023\014\030\001\002\000" +
    "\012\003\uffdd\014\uffdd\035\uffdd\066\uffdd\001\002\000\006" +
    "\012\uffe3\025\uffe5\001\002\000\004\025\267\001\002\000" +
    "\022\012\uffe2\026\247\027\254\030\245\031\246\032\253" +
    "\033\251\034\252\001\002\000\004\012\uffe4\001\002\000" +
    "\004\013\272\001\002\000\034\002\uffb8\003\uffb8\013\uffb8" +
    "\014\uffb8\021\uffb8\035\uffb8\047\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\001\002\000\004\011\274" +
    "\001\002\000\022\012\uffe2\026\247\027\254\030\245\031" +
    "\246\032\253\033\251\034\252\001\002\000\004\012\276" +
    "\001\002\000\012\003\ufff5\014\ufff5\016\ufff5\022\014\001" +
    "\002\000\010\003\uffef\014\uffef\016\016\001\002\000\006" +
    "\003\023\014\030\001\002\000\012\003\uffdc\014\uffdc\035" +
    "\uffdc\066\uffdc\001\002\000\004\002\ufffe\001\002\000\012" +
    "\003\ufffc\014\ufffc\035\ufffc\066\ufffc\001\002\000\006\025" +
    "\311\036\uffec\001\002\000\004\024\uffe8\001\002\000\012" +
    "\003\ufff0\014\ufff0\035\ufff0\066\ufff0\001\002\000\004\024" +
    "\310\001\002\000\012\003\uffe7\014\uffe7\035\uffe7\066\uffe7" +
    "\001\002\000\014\003\uffee\014\uffee\021\uffee\035\uffee\066" +
    "\uffee\001\002\000\004\036\313\001\002\000\020\026\247" +
    "\027\254\030\245\031\246\032\253\033\251\034\252\001" +
    "\002\000\004\024\uffeb\001\002\000\004\024\316\001\002" +
    "\000\014\003\uffea\014\uffea\021\uffea\035\uffea\066\uffea\001" +
    "\002\000\014\003\305\014\uffe6\021\304\035\uffe6\066\uffe6" +
    "\001\002\000\012\003\uffe9\014\uffe9\035\uffe9\066\uffe9\001" +
    "\002\000\014\003\305\014\uffe6\021\304\035\uffe6\066\uffe6" +
    "\001\002\000\012\003\uffed\014\uffed\035\uffed\066\uffed\001" +
    "\002\000\004\023\330\001\002\000\004\024\ufff3\001\002" +
    "\000\014\003\ufff6\014\ufff6\016\ufff6\035\ufff6\066\ufff6\001" +
    "\002\000\004\024\327\001\002\000\014\003\ufff2\014\ufff2" +
    "\016\ufff2\035\ufff2\066\ufff2\001\002\000\006\017\333\020" +
    "\331\001\002\000\004\024\uffb4\001\002\000\004\024\334" +
    "\001\002\000\004\024\uffb3\001\002\000\016\003\324\014" +
    "\ufff1\016\ufff1\021\323\035\ufff1\066\ufff1\001\002\000\014" +
    "\003\ufff4\014\ufff4\016\ufff4\035\ufff4\066\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\006\002\004\046\003\001\001\000\006\003" +
    "\007\036\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\324" +
    "\001\001\000\004\011\016\001\001\000\004\016\305\001" +
    "\001\000\014\006\026\012\023\014\020\040\017\045\024" +
    "\001\001\000\002\001\001\000\012\006\301\012\023\040" +
    "\017\045\302\001\001\000\002\001\001\000\004\064\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\041\026\032\030\036" +
    "\032\037\035\035\041\033\042\045\001\001\000\002\001" +
    "\001\000\004\025\222\001\001\000\002\001\001\000\020" +
    "\013\217\026\032\030\036\032\037\035\035\041\033\042" +
    "\045\001\001\000\006\026\176\027\201\001\001\000\002" +
    "\001\001\000\020\013\174\026\032\030\036\032\037\035" +
    "\035\041\033\042\045\001\001\000\020\013\173\026\032" +
    "\030\036\032\037\035\035\041\033\042\045\001\001\000" +
    "\004\021\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\046\026" +
    "\032\030\036\032\037\035\035\041\033\042\045\001\001" +
    "\000\002\001\001\000\006\043\052\044\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\052\044\060\001\001\000\002\001\001" +
    "\000\016\020\116\022\120\024\115\031\117\034\113\035" +
    "\105\001\001\000\012\022\065\033\074\035\105\037\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\106\035\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\065\033\074\035\105\037\110\001\001\000\002\001\001" +
    "\000\006\022\153\035\105\001\001\000\006\022\152\035" +
    "\105\001\001\000\004\007\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\127\001\001\000\012\022\124\024\123\034\122" +
    "\035\105\001\001\000\004\007\145\001\001\000\002\001" +
    "\001\000\004\033\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\124\034\130\035\105\001\001\000" +
    "\002\001\001\000\004\007\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\144\022\124\024\115\034\122\035\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\124\034\146\035\105\001\001\000\002\001\001\000" +
    "\016\020\116\022\120\024\115\031\150\034\113\035\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\160" +
    "\022\124\024\115\034\122\035\105\001\001\000\020\013" +
    "\157\026\032\030\036\032\037\035\035\041\033\042\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\166\026\032\030\036\032\037\035" +
    "\035\041\033\042\045\001\001\000\004\023\170\001\001" +
    "\000\020\013\172\026\032\030\036\032\037\035\035\041" +
    "\033\042\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\202\026\032\030\036\032\037\035" +
    "\035\041\033\042\045\001\001\000\002\001\001\000\006" +
    "\022\206\035\105\001\001\000\012\022\065\033\074\035" +
    "\105\037\213\001\001\000\004\062\211\001\001\000\002" +
    "\001\001\000\004\006\210\001\001\000\002\001\001\000" +
    "\004\006\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\225" +
    "\022\124\024\115\034\122\035\105\001\001\000\020\013" +
    "\224\026\032\030\036\032\037\035\035\041\033\042\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\240\001\001\000\002\001\001\000\004\057" +
    "\242\001\001\000\006\004\247\005\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\255\001" +
    "\001\000\002\001\001\000\004\005\257\001\001\000\004" +
    "\061\260\001\001\000\004\010\261\001\001\000\004\011" +
    "\262\001\001\000\004\006\263\001\001\000\002\001\001" +
    "\000\004\055\265\001\001\000\002\001\001\000\006\004" +
    "\267\005\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\274\005" +
    "\243\001\001\000\002\001\001\000\004\010\276\001\001" +
    "\000\004\011\277\001\001\000\004\006\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\311\001\001\000\004\054\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\320" +
    "\001\001\000\002\001\001\000\004\005\313\001\001\000" +
    "\004\052\314\001\001\000\002\001\001\000\004\053\316" +
    "\001\001\000\004\016\317\001\001\000\002\001\001\000" +
    "\004\016\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\334\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int error_sync_size(){return 1;}
    public String resultado = "";
    public String ambito = "Global";
    public static LinkedList<TError> tablaES = new LinkedList<TError>();
    public static LinkedList<Error_Semantico> error_semantico = new LinkedList<Error_Semantico>();
    public static LinkedList<String> pila_semantica = new LinkedList<String>();
    public static LinkedList<Nodo_Variable> tabla_simbolos = new LinkedList<Nodo_Variable>();

    //Metodo al que se llama solo en caso de un error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;

        System.out.println("Error sintactico Recuperado!");
        System.out.println("\tToken: " + lexema);
        System.out.println("\tFila: " + fila);
        
        TError  datos = new TError(lexema, fila);
        tablaES.add(datos);
    }

    //Metodo al que se llama solo en caso que no se pueda recuperar del error
    public void unrecovered_syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;

        //System.out.println("Error sintactico, No es posible recuperacion!");
        //System.out.println("\tToken: " + lexema);
        //System.out.println("\tFila: " + fila);

        TError  datos = new TError(lexema, fila);
        tablaES.add(datos);
    }

    public void agregarError(String lexema, int fila){
        TError error = new TError(lexema, fila);
        tablaES.add(error);
        System.out.println(error.toString());
    }

    public void meter_variables(){
        if(pila_semantica.size()>0){
            String tipo = pila_semantica.pop();
            int temp = pila_semantica.size();
            while(temp > 0){
                if(!existe(pila_semantica.getFirst())){
                    Nodo_Variable temp1 = new Nodo_Variable(pila_semantica.pop(), tipo, ambito);
                    tabla_simbolos.add(temp1);
                    System.out.println(temp1.toString());
                } else{
                    error_semantico.add(new Error_Semantico("Variable doblemente definida",pila_semantica.pop()));
                }
                temp--;
            }
        }
    }

    public void meter_parametro(){
        while(!pila_semantica.getFirst().equals("(")){
            if((!existe(pila_semantica.getFirst())) && (verificar_param())){
                Nodo_Variable temp = new Nodo_Variable(pila_semantica.pop(), pila_semantica.pop(), ambito);
                tabla_simbolos.add(temp);
            } else{
                pila_semantica.pop();
            }
        }
        pila_semantica.pop();
    }
    
    public boolean verificar_param(){
        for (Nodo_Variable nodo : tabla_simbolos){
            if(nodo.getId().equals(ambito)){return false;}
        }
        return true;
    }

    public boolean existe(String id){
        for (Nodo_Variable nodo : tabla_simbolos) {
            if(nodo.getId().equals(id)){System.out.println("dio error");return true;}
        }
        return false;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {


    

  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
parser.error_sync_size();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		System.out.println(tabla_simbolos.toString());System.out.println(error_semantico.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= program constantes variables procesos cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= program constantes variables cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procesos ::= procesos operacion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // procesos ::= operacion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacion ::= funciones 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operacion ::= procedimientos 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= PROGRAM ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("program",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= PROGRAM error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en PROGRAM", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("program",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constantes ::= CONST def_constante 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constantes ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def_constante ::= ID IGUALAR literal PUNTO_COMA def_constante 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de CONST", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_constante ::= error NT$1 PUNTO_COMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_constante ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= VAR def_var 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
parser.pila_semantica.push(id.toString());System.out.println(parser.pila_semantica.getFirst());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_var ::= ID COMA NT$2 def_var 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(id.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(tp);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
meter_variables();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_var ::= ID NT$3 DOS_PUNTOS tipo_datos NT$4 PUNTO_COMA NT$5 def_var 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$6 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de VAR", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_var ::= error NT$6 PUNTO_COMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_var ::= 
            {
              String RESULT =null;
		meter_variables();parser.ambito = "Global";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(tp); parser.pila_semantica.push(id.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametro ::= tipo_datos ID NT$7 COMA parametro 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametro ::= tipo_datos ID 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.pila_semantica.push(tp); parser.pila_semantica.push(id.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametro ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.ambito = id.toString(); parser.pila_semantica.push(id.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(par.toString());
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
meter_parametro();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-8)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.pila_semantica.push(tp);meter_variables();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funciones ::= FUNCTION ID NT$8 para NT$9 parametro parc NT$10 DOS_PUNTOS tipo_datos NT$11 constantes variables cuerpo 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-12)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-12)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-10)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-10)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-10)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedimientos ::= PROCEDURE ID para parametro parc constantes variables cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procedimientos",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statements ::= IF if_expression statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statements ::= WHILE while_body statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statements ::= FOR for_body statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statements ::= asignacion statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statements ::= call_funcion statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statements ::= read statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statements ::= write statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statements ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for_body ::= asignar TO num_id DO cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_body ::= asignar TO para exp_aritmetrica parc DO cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$12 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de FOR, error en expresion", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_body ::= asignar TO error NT$12 cuerpo 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // while_body ::= para exp_booleana parc DO cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("while_body",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // while_body ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de WHILE", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("while_body",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_expression ::= para exp_booleana parc THEN statements else_body END 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if_expression",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$13 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de IF", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if_expression ::= para error NT$13 END 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if_expression",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_body ::= ELSE statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("else_body",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // else_body ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("else_body",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_booleana ::= condicion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_booleana ::= para condicion parc op_booleana exp_booleana 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_booleana ::= para condicion parc 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= expresion op_booleana expresion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de CONDICION", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // op_booleana ::= IGUALAR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // op_booleana ::= MAYOR_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_booleana ::= MAYOR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_booleana ::= MENOR_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_booleana ::= MENOR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_booleana ::= DIFERENTE 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_booleana ::= OR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_booleana ::= AND 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_booleana ::= NOT 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpo ::= BEGIN statements END 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$14 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el cuerpo", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpo ::= error NT$14 END 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignar ::= ID ASIGNAR exp_aritmetrica 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignar ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de ASIGNACION", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion ::= asignar PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= NUM 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= CADENA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // num_id ::= NUM 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // num_id ::= ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // num_id ::= funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // num_id ::= CADENA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp_aritmetrica ::= num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp_aritmetrica ::= num_id op_aritmetricos exp_aritmetrica 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp_aritmetrica ::= num_id op_aritmetricos 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp_aritmetrica ::= op_aritmetricos num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= num_id op_aritmetricos expresion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= MAS_MAS num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= MENOS_MENOS num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= num_id MAS_MAS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= num_id MENOS_MENOS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_datos ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT ="BOOLEAN";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipo_datos ::= CHAR 
            {
              String RESULT =null;
		RESULT ="CHAR";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo_datos ::= INT 
            {
              String RESULT =null;
		RESULT ="INT";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipo_datos ::= LONGINT 
            {
              String RESULT =null;
		RESULT ="LONGINT";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipo_datos ::= REAL 
            {
              String RESULT =null;
		RESULT ="REAL";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tipo_datos ::= SHORTINT 
            {
              String RESULT =null;
		RESULT ="SHORTINT";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipo_datos ::= STRING 
            {
              String RESULT =null;
		RESULT ="STRING";
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // op_aritmetricos ::= MAS_MAS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // op_aritmetricos ::= MENOS_MENOS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // op_aritmetricos ::= MAS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // op_aritmetricos ::= MENOS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // op_aritmetricos ::= MULT 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // op_aritmetricos ::= DIVICION 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // op_aritmetricos ::= DIV 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // op_aritmetricos ::= MOD 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // op_aritmetricos ::= MAS_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op_aritmetricos ::= MENOS_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // op_aritmetricos ::= POR_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_aritmetricos ::= DIV_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lista_param ::= num_id COMA lista_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lista_param ::= expresion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lista_param ::= exp_booleana 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lista_param ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funcion ::= ID para lista_param parc 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // call_funcion ::= funcion PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("call_funcion",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // call_funcion ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de FUNCTION", eright);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("call_funcion",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // read ::= READ para ID parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("read",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // read ::= READ para parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("read",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // write ::= WRITE para lista_write_param parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // write_param ::= CADENA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // write_param ::= ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // write_param ::= NUM 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lista_write_param ::= write_param COMA lista_write_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_write_param",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lista_write_param ::= write_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_write_param",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
