
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\006\000\002\014\004\000\002\014\003" +
    "\000\002\045\003\000\002\045\003\000\002\036\004\000" +
    "\002\036\004\000\002\010\004\000\002\010\002\000\002" +
    "\015\007\000\002\046\002\000\002\015\005\000\002\015" +
    "\002\000\002\011\004\000\002\011\002\000\002\016\005" +
    "\000\002\016\007\000\002\047\002\000\002\016\005\000" +
    "\002\016\002\000\002\004\006\000\002\004\004\000\002" +
    "\004\002\000\002\012\014\000\002\040\012\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\002\000\002\027\007\000\002\027\011\000\002" +
    "\050\002\000\002\027\007\000\002\025\007\000\002\025" +
    "\003\000\002\021\011\000\002\051\002\000\002\021\006" +
    "\000\002\023\004\000\002\023\002\000\002\020\003\000" +
    "\002\020\007\000\002\020\005\000\002\024\005\000\002" +
    "\024\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\006\005\000\002\052\002\000\002\006\005\000\002" +
    "\026\005\000\002\026\003\000\002\032\004\000\002\017" +
    "\003\000\002\017\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\037\003\000" +
    "\002\037\005\000\002\037\004\000\002\037\004\000\002" +
    "\034\003\000\002\034\005\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\031\005\000\002" +
    "\031\003\000\002\031\003\000\002\031\002\000\002\035" +
    "\006\000\002\030\004\000\002\030\003\000\002\041\007" +
    "\000\002\041\006\000\002\042\007\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\005\000\002" +
    "\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\004\015\007\001\002\000\016\003\ufff6\014" +
    "\ufff6\016\ufff6\022\013\035\ufff6\066\ufff6\001\002\000\004" +
    "\002\000\001\002\000\004\002\012\001\002\000\006\003" +
    "\011\021\010\001\002\000\016\003\ufff9\014\ufff9\016\ufff9" +
    "\022\ufff9\035\ufff9\066\ufff9\001\002\000\016\003\ufff8\014" +
    "\ufff8\016\ufff8\022\ufff8\035\ufff8\066\ufff8\001\002\000\004" +
    "\002\001\001\002\000\016\003\312\014\ufff2\016\ufff2\021" +
    "\311\035\ufff2\066\ufff2\001\002\000\014\003\ufff0\014\ufff0" +
    "\016\015\035\ufff0\066\ufff0\001\002\000\014\003\277\014" +
    "\uffeb\021\276\035\uffeb\066\uffeb\001\002\000\012\003\022" +
    "\014\027\035\025\066\021\001\002\000\012\003\ufffa\014" +
    "\ufffa\035\ufffa\066\ufffa\001\002\000\012\003\022\014\027" +
    "\035\025\066\021\001\002\000\004\021\265\001\002\000" +
    "\004\013\uffc3\001\002\000\012\003\ufffb\014\ufffb\035\ufffb" +
    "\066\ufffb\001\002\000\012\003\ufffc\014\ufffc\035\ufffc\066" +
    "\ufffc\001\002\000\004\021\237\001\002\000\004\002\ufffe" +
    "\001\002\000\022\003\044\013\uffde\021\042\047\040\051" +
    "\031\052\034\067\030\070\043\001\002\000\004\011\231" +
    "\001\002\000\006\003\223\011\221\001\002\000\004\024" +
    "\220\001\002\000\024\003\044\013\uffde\021\042\047\040" +
    "\051\031\052\034\053\uffde\067\030\070\043\001\002\000" +
    "\006\003\200\021\176\001\002\000\004\024\175\001\002" +
    "\000\024\003\044\013\uffde\021\042\047\040\051\031\052" +
    "\034\053\uffde\067\030\070\043\001\002\000\024\003\044" +
    "\013\uffde\021\042\047\040\051\031\052\034\053\uffde\067" +
    "\030\070\043\001\002\000\004\011\155\001\002\000\004" +
    "\013\154\001\002\000\006\011\061\055\062\001\002\000" +
    "\004\011\047\001\002\000\026\003\uff95\013\uff95\021\uff95" +
    "\024\uffc0\047\uff95\051\uff95\052\uff95\053\uff95\067\uff95\070" +
    "\uff95\001\002\000\024\003\044\013\uffde\021\042\047\040" +
    "\051\031\052\034\053\uffde\067\030\070\043\001\002\000" +
    "\006\013\uffdf\053\uffdf\001\002\000\010\017\054\020\051" +
    "\021\050\001\002\000\006\012\uff90\025\uff90\001\002\000" +
    "\006\012\uff8f\025\uff8f\001\002\000\006\012\uff8d\025\057" +
    "\001\002\000\004\012\055\001\002\000\006\012\uff91\025" +
    "\uff91\001\002\000\004\024\056\001\002\000\024\003\uff92" +
    "\013\uff92\021\uff92\047\uff92\051\uff92\052\uff92\053\uff92\067" +
    "\uff92\070\uff92\001\002\000\010\017\054\020\051\021\050" +
    "\001\002\000\004\012\uff8e\001\002\000\022\003\115\011" +
    "\121\012\uff98\017\066\020\071\021\070\061\111\062\112" +
    "\001\002\000\040\004\104\005\064\006\073\007\101\010" +
    "\076\017\066\020\071\021\070\057\102\060\075\061\077" +
    "\062\072\063\103\064\067\065\063\001\002\000\046\004" +
    "\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\024\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\001\002\000\046" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\012\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\024\uffa4\056\uffa4\057\uffa4\060\uffa4" +
    "\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\001\002\000" +
    "\040\004\104\005\064\006\073\007\101\010\076\012\uffb8" +
    "\024\uffb8\056\uffb8\057\102\060\075\061\077\062\072\063" +
    "\103\064\067\065\063\001\002\000\066\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\012\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\054\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002\000\046" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\024\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\001\002\000" +
    "\070\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\061" +
    "\012\uffbb\023\uffbb\024\uffbb\025\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\054\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\001\002\000\066\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\012\uffbc\023\uffbc\024\uffbc\025\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\001\002\000\046\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\012\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\024\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\001\002\000\046\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\012\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\024\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\001\002\000\010" +
    "\017\066\020\071\021\070\001\002\000\046\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\012\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\024\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\064\uff9e\065\uff9e\001\002\000\046\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\012\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\024\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\064\uffa1\065\uffa1\001\002\000\046\004" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\024\uffa7\056\uffa7\057\uffa7\060\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\001\002\000\006" +
    "\024\uffc1\056\uffc1\001\002\000\046\004\uffa2\005\uffa2\006" +
    "\uffa2\007\uffa2\010\uffa2\012\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\024\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\065\uffa2\001\002\000\046\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\012\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\024\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\001\002\000\046\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\012\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\024\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\001\002\000\046\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\024\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\065\uffa5\001\002\000\066\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\012\uffba\023\uffba" +
    "\024\uffba\025\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\046\uffba\054\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001" +
    "\002\000\010\012\uffb5\024\uffb5\056\uffb5\001\002\000\046" +
    "\004\104\005\064\006\073\007\101\010\076\012\uffb6\017" +
    "\066\020\071\021\070\024\uffb6\056\uffb6\057\102\060\075" +
    "\061\077\062\072\063\103\064\067\065\063\001\002\000" +
    "\010\012\uffb7\024\uffb7\056\uffb7\001\002\000\010\017\066" +
    "\020\071\021\070\001\002\000\010\017\066\020\071\021" +
    "\070\001\002\000\026\012\uff9a\023\135\037\134\040\137" +
    "\041\142\042\133\043\141\044\143\045\132\046\140\001" +
    "\002\000\004\012\uffd2\001\002\000\004\012\uffce\001\002" +
    "\000\004\012\uff99\001\002\000\004\012\151\001\002\000" +
    "\060\004\104\005\064\006\073\007\101\010\076\012\uffb4" +
    "\023\uffb4\025\147\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\057\102\060\075\061\125" +
    "\062\126\063\103\064\067\065\063\001\002\000\016\003" +
    "\115\017\066\020\071\021\070\061\111\062\112\001\002" +
    "\000\024\023\135\037\134\040\137\041\142\042\133\043" +
    "\141\044\143\045\132\046\140\001\002\000\004\012\131" +
    "\001\002\000\056\004\104\005\064\006\073\007\101\010" +
    "\076\012\uffb4\023\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\057\102\060\075\061" +
    "\125\062\126\063\103\064\067\065\063\001\002\000\040" +
    "\012\uffb0\017\uffa7\020\uffa7\021\uffa7\023\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\061\uffa7\062\uffa7\001\002\000\040\012\uffaf\017\uffa6\020" +
    "\uffa6\021\uffa6\023\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\061\uffa6\062\uffa6\001" +
    "\002\000\014\017\066\020\071\021\070\061\111\062\112" +
    "\001\002\000\026\012\uffb3\023\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002" +
    "\000\026\012\uffd0\023\135\037\134\040\137\041\142\042" +
    "\133\043\141\044\143\045\132\046\140\001\002\000\020" +
    "\003\uffc6\011\uffc6\017\uffc6\020\uffc6\021\uffc6\061\uffc6\062" +
    "\uffc6\001\002\000\020\003\uffc9\011\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\061\uffc9\062\uffc9\001\002\000\020\003\uffcc\011" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\061\uffcc\062\uffcc\001\002" +
    "\000\020\003\uffcd\011\uffcd\017\uffcd\020\uffcd\021\uffcd\061" +
    "\uffcd\062\uffcd\001\002\000\020\003\115\011\121\017\066" +
    "\020\071\021\070\061\111\062\112\001\002\000\020\003" +
    "\uffcb\011\uffcb\017\uffcb\020\uffcb\021\uffcb\061\uffcb\062\uffcb" +
    "\001\002\000\020\003\uffc5\011\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\061\uffc5\062\uffc5\001\002\000\020\003\uffc8\011\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\061\uffc8\062\uffc8\001\002\000" +
    "\020\003\uffca\011\uffca\017\uffca\020\uffca\021\uffca\061\uffca" +
    "\062\uffca\001\002\000\020\003\uffc7\011\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\061\uffc7\062\uffc7\001\002\000\004\012\uffd1" +
    "\001\002\000\014\017\066\020\071\021\070\061\111\062" +
    "\112\001\002\000\004\012\uffcf\001\002\000\022\003\115" +
    "\011\121\012\uff98\017\066\020\071\021\070\061\111\062" +
    "\112\001\002\000\004\012\uff9b\001\002\000\066\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\012\uff97\023\uff97\024" +
    "\uff97\025\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\054\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\001\002" +
    "\000\026\012\uffb1\023\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\001\002\000\026" +
    "\012\uffb2\023\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\001\002\000\034\002\uffc4" +
    "\003\uffc4\013\uffc4\014\uffc4\021\uffc4\035\uffc4\047\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\066\uffc4\067\uffc4\070\uffc4\001\002" +
    "\000\020\003\161\011\121\017\066\020\071\021\070\061" +
    "\111\062\112\001\002\000\024\003\044\013\uffde\021\042" +
    "\047\040\051\031\052\034\053\uffde\067\030\070\043\001" +
    "\002\000\006\013\uffe5\053\uffe5\001\002\000\004\012\164" +
    "\001\002\000\006\012\uffce\013\uffd6\001\002\000\004\013" +
    "\163\001\002\000\024\003\uffd5\013\uffd5\021\uffd5\047\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\067\uffd5\070\uffd5\001\002\000" +
    "\004\050\165\001\002\000\024\003\044\013\uffde\021\042" +
    "\047\040\051\031\052\034\053\uffde\067\030\070\043\001" +
    "\002\000\006\013\uffd3\053\167\001\002\000\022\003\044" +
    "\013\uffde\021\042\047\040\051\031\052\034\067\030\070" +
    "\043\001\002\000\004\013\171\001\002\000\024\003\uffd7" +
    "\013\uffd7\021\uffd7\047\uffd7\051\uffd7\052\uffd7\053\uffd7\067" +
    "\uffd7\070\uffd7\001\002\000\004\013\uffd4\001\002\000\006" +
    "\013\uffe2\053\uffe2\001\002\000\006\013\uffe1\053\uffe1\001" +
    "\002\000\024\003\uff96\013\uff96\021\uff96\047\uff96\051\uff96" +
    "\052\uff96\053\uff96\067\uff96\070\uff96\001\002\000\004\055" +
    "\062\001\002\000\004\056\203\001\002\000\004\056\uffc0" +
    "\001\002\000\024\003\044\013\uffde\021\042\047\040\051" +
    "\031\052\034\053\uffde\067\030\070\043\001\002\000\006" +
    "\013\uffe3\053\uffe3\001\002\000\014\003\205\011\204\017" +
    "\066\020\071\021\070\001\002\000\040\004\104\005\064" +
    "\006\073\007\101\010\076\017\066\020\071\021\070\057" +
    "\102\060\075\061\077\062\072\063\103\064\067\065\063" +
    "\001\002\000\006\003\uffdb\014\uffdb\001\002\000\004\054" +
    "\207\001\002\000\006\003\022\014\027\001\002\000\024" +
    "\003\uffdd\013\uffdd\021\uffdd\047\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\067\uffdd\070\uffdd\001\002\000\006\003\022\014\027" +
    "\001\002\000\024\003\uffda\013\uffda\021\uffda\047\uffda\051" +
    "\uffda\052\uffda\053\uffda\067\uffda\070\uffda\001\002\000\004" +
    "\012\214\001\002\000\004\054\215\001\002\000\006\003" +
    "\022\014\027\001\002\000\024\003\uffdc\013\uffdc\021\uffdc" +
    "\047\uffdc\051\uffdc\052\uffdc\053\uffdc\067\uffdc\070\uffdc\001" +
    "\002\000\006\013\uffe0\053\uffe0\001\002\000\024\003\uffbf" +
    "\013\uffbf\021\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\067" +
    "\uffbf\070\uffbf\001\002\000\020\003\115\011\121\017\066" +
    "\020\071\021\070\061\111\062\112\001\002\000\024\003" +
    "\044\013\uffde\021\042\047\040\051\031\052\034\053\uffde" +
    "\067\030\070\043\001\002\000\024\003\uffd8\013\uffd8\021" +
    "\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\067\uffd8\070\uffd8" +
    "\001\002\000\006\013\uffe4\053\uffe4\001\002\000\004\012" +
    "\226\001\002\000\004\054\227\001\002\000\006\003\022" +
    "\014\027\001\002\000\024\003\uffd9\013\uffd9\021\uffd9\047" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\067\uffd9\070\uffd9\001\002" +
    "\000\006\012\233\021\232\001\002\000\004\012\235\001" +
    "\002\000\004\024\234\001\002\000\024\003\uff93\013\uff93" +
    "\021\uff93\047\uff93\051\uff93\052\uff93\053\uff93\067\uff93\070" +
    "\uff93\001\002\000\004\024\236\001\002\000\024\003\uff94" +
    "\013\uff94\021\uff94\047\uff94\051\uff94\052\uff94\053\uff94\067" +
    "\uff94\070\uff94\001\002\000\004\011\240\001\002\000\022" +
    "\012\uffe8\026\244\027\251\030\242\031\243\032\250\033" +
    "\246\034\247\001\002\000\004\021\260\001\002\000\016" +
    "\003\uffac\014\uffac\016\uffac\021\uffac\022\uffac\024\uffac\001" +
    "\002\000\016\003\uffab\014\uffab\016\uffab\021\uffab\022\uffab" +
    "\024\uffab\001\002\000\016\003\uffae\014\uffae\016\uffae\021" +
    "\uffae\022\uffae\024\uffae\001\002\000\004\012\252\001\002" +
    "\000\016\003\uffa9\014\uffa9\016\uffa9\021\uffa9\022\uffa9\024" +
    "\uffa9\001\002\000\016\003\uffa8\014\uffa8\016\uffa8\021\uffa8" +
    "\022\uffa8\024\uffa8\001\002\000\016\003\uffaa\014\uffaa\016" +
    "\uffaa\021\uffaa\022\uffaa\024\uffaa\001\002\000\016\003\uffad" +
    "\014\uffad\016\uffad\021\uffad\022\uffad\024\uffad\001\002\000" +
    "\004\036\253\001\002\000\020\026\244\027\251\030\242" +
    "\031\243\032\250\033\246\034\247\001\002\000\012\003" +
    "\ufff6\014\ufff6\016\ufff6\022\013\001\002\000\010\003\ufff0" +
    "\014\ufff0\016\015\001\002\000\006\003\022\014\027\001" +
    "\002\000\012\003\uffe7\014\uffe7\035\uffe7\066\uffe7\001\002" +
    "\000\006\012\uffe9\025\261\001\002\000\022\012\uffe8\026" +
    "\244\027\251\030\242\031\243\032\250\033\246\034\247" +
    "\001\002\000\004\012\uffea\001\002\000\004\013\264\001" +
    "\002\000\034\002\uffc2\003\uffc2\013\uffc2\014\uffc2\021\uffc2" +
    "\035\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\066\uffc2\067" +
    "\uffc2\070\uffc2\001\002\000\004\011\266\001\002\000\022" +
    "\012\uffe8\026\244\027\251\030\242\031\243\032\250\033" +
    "\246\034\247\001\002\000\004\012\270\001\002\000\012" +
    "\003\ufff6\014\ufff6\016\ufff6\022\013\001\002\000\010\003" +
    "\ufff0\014\ufff0\016\015\001\002\000\006\003\022\014\027" +
    "\001\002\000\012\003\uffe6\014\uffe6\035\uffe6\066\uffe6\001" +
    "\002\000\004\002\uffff\001\002\000\012\003\ufffd\014\ufffd" +
    "\035\ufffd\066\ufffd\001\002\000\006\025\303\036\304\001" +
    "\002\000\004\024\uffed\001\002\000\012\003\ufff1\014\ufff1" +
    "\035\ufff1\066\ufff1\001\002\000\004\024\302\001\002\000" +
    "\012\003\uffec\014\uffec\035\uffec\066\uffec\001\002\000\014" +
    "\003\277\014\uffeb\021\276\035\uffeb\066\uffeb\001\002\000" +
    "\020\026\244\027\251\030\242\031\243\032\250\033\246" +
    "\034\247\001\002\000\004\024\306\001\002\000\014\003" +
    "\277\014\uffeb\021\276\035\uffeb\066\uffeb\001\002\000\012" +
    "\003\uffee\014\uffee\035\uffee\066\uffee\001\002\000\012\003" +
    "\uffef\014\uffef\035\uffef\066\uffef\001\002\000\004\023\316" +
    "\001\002\000\004\024\ufff4\001\002\000\014\003\ufff7\014" +
    "\ufff7\016\ufff7\035\ufff7\066\ufff7\001\002\000\004\024\315" +
    "\001\002\000\014\003\ufff3\014\ufff3\016\ufff3\035\ufff3\066" +
    "\ufff3\001\002\000\006\017\321\020\317\001\002\000\004" +
    "\024\uffbe\001\002\000\004\024\322\001\002\000\004\024" +
    "\uffbd\001\002\000\016\003\312\014\ufff2\016\ufff2\021\311" +
    "\035\ufff2\066\ufff2\001\002\000\014\003\ufff5\014\ufff5\016" +
    "\ufff5\035\ufff5\066\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\010\002\005\003\004\036\003\001\001\000" +
    "\004\010\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\312\001\001\000\004\011\015" +
    "\001\001\000\004\016\277\001\001\000\014\006\025\012" +
    "\022\014\017\040\016\045\023\001\001\000\002\001\001" +
    "\000\012\006\273\012\022\040\016\045\274\001\001\000" +
    "\002\001\001\000\004\052\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\040\026\031\030\035\032\036\035\034\041\032" +
    "\042\044\001\001\000\002\001\001\000\004\025\221\001" +
    "\001\000\002\001\001\000\020\013\216\026\031\030\035" +
    "\032\036\035\034\041\032\042\044\001\001\000\006\026" +
    "\176\027\200\001\001\000\002\001\001\000\020\013\173" +
    "\026\031\030\035\032\036\035\034\041\032\042\044\001" +
    "\001\000\020\013\172\026\031\030\035\032\036\035\034" +
    "\041\032\042\044\001\001\000\004\021\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\045\026\031\030\035\032\036\035" +
    "\034\041\032\042\044\001\001\000\002\001\001\000\006" +
    "\043\051\044\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\051\044" +
    "\057\001\001\000\002\001\001\000\016\020\115\022\117" +
    "\024\113\031\116\034\112\035\104\001\001\000\012\022" +
    "\064\033\073\035\104\037\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\105\035" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\064\033\073\035\104\037" +
    "\107\001\001\000\002\001\001\000\006\022\152\035\104" +
    "\001\001\000\006\022\151\035\104\001\001\000\004\007" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\126\001\001\000" +
    "\012\022\123\024\122\034\121\035\104\001\001\000\004" +
    "\007\144\001\001\000\002\001\001\000\004\033\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\123" +
    "\034\127\035\104\001\001\000\002\001\001\000\004\007" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\143\022\123\024" +
    "\113\034\121\035\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\123\034\145\035\104" +
    "\001\001\000\002\001\001\000\016\020\115\022\117\024" +
    "\113\031\147\034\112\035\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\157\022\123\024\113\034\121" +
    "\035\104\001\001\000\020\013\156\026\031\030\035\032" +
    "\036\035\034\041\032\042\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\165" +
    "\026\031\030\035\032\036\035\034\041\032\042\044\001" +
    "\001\000\004\023\167\001\001\000\020\013\171\026\031" +
    "\030\035\032\036\035\034\041\032\042\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\201" +
    "\026\031\030\035\032\036\035\034\041\032\042\044\001" +
    "\001\000\002\001\001\000\006\022\205\035\104\001\001" +
    "\000\012\022\064\033\073\035\104\037\212\001\001\000" +
    "\004\050\210\001\001\000\002\001\001\000\004\006\207" +
    "\001\001\000\002\001\001\000\004\006\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\224\022\123\024\113\034\121" +
    "\035\104\001\001\000\020\013\223\026\031\030\035\032" +
    "\036\035\034\041\032\042\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\244\005\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\253\001\001" +
    "\000\004\010\254\001\001\000\004\011\255\001\001\000" +
    "\004\006\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\261\005\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\266\005\240\001\001\000\002\001\001\000\004\010" +
    "\270\001\001\000\004\011\271\001\001\000\004\006\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\307\001\001\000\004\005\304\001\001\000\002\001\001" +
    "\000\004\016\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\322\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int error_sync_size(){return 1;}
    public String resultado = "";
    public static LinkedList<TError> tablaES = new LinkedList<TError>();

    //Metodo al que se llama solo en caso de un error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;

        System.out.println("Error sintactico Recuperado!");
        System.out.println("\tToken: " + lexema);
        System.out.println("\tFila: " + fila);
        
        TError  datos = new TError(lexema, fila);
        tablaES.add(datos);
    }

    //Metodo al que se llama solo en caso que no se pueda recuperar del error
    public void unrecovered_syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;

        System.out.println("Error sintactico, No es posible recuperacion!");
        System.out.println("\tToken: " + lexema);
        System.out.println("\tFila: " + fila);

        TError  datos = new TError(lexema, fila);
        tablaES.add(datos);
    }

    public void agregarError(String lexema, int fila){
        TError error = new TError(lexema, fila);
        tablaES.add(error);
        System.out.println(error.toString());
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {


    

  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= E 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= program constantes variables procesos cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= program constantes variables cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // procesos ::= procesos operacion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procesos ::= operacion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procesos",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operacion ::= funciones 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacion ::= procedimientos 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program ::= PROGRAM ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("program",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= PROGRAM error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en PROGRAM", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("program",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constantes ::= CONST def_constante 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constantes ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_constante ::= ID IGUALAR literal PUNTO_COMA def_constante 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de CONST", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_constante ::= error NT$0 PUNTO_COMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_constante ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= VAR def_var 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_var ::= ID COMA def_var 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_var ::= ID DOS_PUNTOS tipo_datos PUNTO_COMA def_var 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de VAR", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_var ::= error NT$1 PUNTO_COMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_var ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("def_var",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro ::= tipo_datos ID COMA parametro 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametro ::= tipo_datos ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametro ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funciones ::= FUNCTION ID para parametro parc DOS_PUNTOS tipo_datos constantes variables cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedimientos ::= PROCEDURE ID para parametro parc constantes variables cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("procedimientos",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements ::= IF if_expression statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements ::= WHILE while_body statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statements ::= FOR for_body statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statements ::= asignacion statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statements ::= call_funcion statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= read statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= write statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statements ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for_body ::= asignar TO num_id DO cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for_body ::= asignar TO para exp_aritmetrica parc DO cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$2 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de FOR, error en expresion", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for_body ::= asignar TO error NT$2 cuerpo 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("for_body",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // while_body ::= para exp_booleana parc DO cuerpo 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("while_body",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while_body ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de WHILE", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("while_body",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_expression ::= para exp_booleana parc THEN statements else_body END 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if_expression",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$3 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el bloque de IF", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_expression ::= para error NT$3 END 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if_expression",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // else_body ::= ELSE statements 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("else_body",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else_body ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("else_body",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_booleana ::= condicion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp_booleana ::= para condicion parc op_booleana exp_booleana 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp_booleana ::= para condicion parc 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_booleana",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= expresion op_booleana expresion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de CONDICION", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_booleana ::= IGUALAR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_booleana ::= MAYOR_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op_booleana ::= MAYOR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op_booleana ::= MENOR_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op_booleana ::= MENOR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op_booleana ::= DIFERENTE 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op_booleana ::= OR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // op_booleana ::= AND 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op_booleana ::= NOT 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_booleana",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpo ::= BEGIN statements END 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$4 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
parser.agregarError("Error en el cuerpo", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo ::= error NT$4 END 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignar ::= ID ASIGNAR exp_aritmetrica 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignar ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de ASIGNACION", eleft);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacion ::= asignar PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= NUM 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= CADENA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // num_id ::= NUM 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // num_id ::= ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // num_id ::= funcion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // num_id ::= CADENA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("num_id",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp_aritmetrica ::= num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp_aritmetrica ::= num_id op_aritmetricos exp_aritmetrica 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp_aritmetrica ::= num_id op_aritmetricos 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp_aritmetrica ::= op_aritmetricos num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("exp_aritmetrica",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= num_id op_aritmetricos expresion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= MAS_MAS num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= MENOS_MENOS num_id 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= num_id MAS_MAS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= num_id MENOS_MENOS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_datos ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo_datos ::= CHAR 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo_datos ::= INT 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo_datos ::= LONGINT 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipo_datos ::= REAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipo_datos ::= SHORTINT 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_datos ::= STRING 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_aritmetricos ::= MAS_MAS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op_aritmetricos ::= MENOS_MENOS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op_aritmetricos ::= MAS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op_aritmetricos ::= MENOS 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op_aritmetricos ::= MULT 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // op_aritmetricos ::= DIVICION 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // op_aritmetricos ::= DIV 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // op_aritmetricos ::= MOD 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // op_aritmetricos ::= MAS_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // op_aritmetricos ::= MENOS_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // op_aritmetricos ::= POR_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // op_aritmetricos ::= DIV_IGUAL 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("op_aritmetricos",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_param ::= num_id COMA lista_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_param ::= expresion 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_param ::= exp_booleana 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_param ::= 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_param",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // funcion ::= ID para lista_param parc 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // call_funcion ::= funcion PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("call_funcion",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // call_funcion ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		parser.agregarError("Error en la definicion de FUNCTION", eright);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("call_funcion",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // read ::= READ para ID parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("read",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // read ::= READ para parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("read",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // write ::= WRITE para lista_write_param parc PUNTO_COMA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // write_param ::= CADENA 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // write_param ::= ID 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // write_param ::= NUM 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("write_param",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lista_write_param ::= write_param COMA lista_write_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_write_param",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_write_param ::= write_param 
            {
              String RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_write_param",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
