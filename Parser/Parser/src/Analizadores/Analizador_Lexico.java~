/* The following code was generated by JFlex 1.6.1 */

/*------------------1er Area: Codigo de Ususario--------------*/
//-----> Paquetes, importaciones
package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/*------------------2da Area: Opciones y Declaraciones--------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 20, 21, 20, 20,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    20,  0,  6,  0,  0,  0,  0,  0, 10, 11,  8,  7,  0,  5,  3,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0, 
     0, 16,  2,  2, 19,  4,  2, 15,  2,  2,  2,  2,  2, 17, 18, 14, 
    12,  2, 13,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\3\1\12\1\0\2\3\1\0"+
    "\1\2\1\3\1\2\1\3\1\13\1\3\1\0\2\3"+
    "\1\2\1\0\5\3\1\14\170\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\26\0\156\0\26"+
    "\0\26\0\26\0\26\0\26\0\204\0\26\0\232\0\260"+
    "\0\306\0\156\0\26\0\334\0\362\0\u0108\0\u0108\0\u011e"+
    "\0\u0134\0\u014a\0\u0160\0\u0176\0\u0176\0\u018c\0\u01a2\0\u01b8"+
    "\0\u01ce\0\u01e4\0\u01e4\0\u01fa\0\u0210\0\u0226\0\u023c\0\u0252"+
    "\0\u0268\0\u027e\0\u0294\0\u02aa\0\u02c0\0\u02d6\0\u02ec\0\u0302"+
    "\0\u0318\0\u032e\0\u0344\0\u035a\0\u0370\0\u0386\0\u039c\0\u03b2"+
    "\0\u03c8\0\u03de\0\u03f4\0\u040a\0\u0420\0\u0436\0\u044c\0\u0462"+
    "\0\u0478\0\u048e\0\u04a4\0\u04ba\0\u04d0\0\u04e6\0\u04fc\0\u0512"+
    "\0\u0528\0\u053e\0\u0554\0\u056a\0\u0580\0\u0596\0\u05ac\0\u05c2"+
    "\0\u05d8\0\u05ee\0\u0604\0\u061a\0\u0630\0\u0646\0\u065c\0\u0672"+
    "\0\u0688\0\u069e\0\u06b4\0\u06ca\0\u06e0\0\u06f6\0\u070c\0\u0722"+
    "\0\u0738\0\u074e\0\u0764\0\u077a\0\u0790\0\u07a6\0\u07bc\0\u07d2"+
    "\0\u07e8\0\u07fe\0\u0814\0\u082a\0\u0840\0\u0856\0\u086c\0\u0882"+
    "\0\u0898\0\u08ae\0\u08c4\0\u08da\0\u08f0\0\u0906\0\u091c\0\u0932"+
    "\0\u0948\0\u095e\0\u0974\0\u098a\0\u09a0\0\u09b6\0\u09cc\0\u09e2"+
    "\0\u09f8\0\u0a0e\0\u0a24\0\u0a3a\0\u0a50\0\u0a66\0\u0a7c\0\u0a92"+
    "\0\u0aa8\0\u0abe\0\u0ad4\0\u0aea\0\u0b00\0\u0b16\0\u0b2c\0\u0b42"+
    "\0\u0b58\0\u0b6e\0\u0b84\0\u0b9a\0\u0bb0\0\u0bc6\0\u0bdc\0\u0bf2"+
    "\0\u0c08\0\u0c1e\0\26";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\7\4\1\16\30\0"+
    "\1\3\1\0\1\17\23\0\2\20\1\0\1\20\7\0"+
    "\10\20\3\0\2\20\1\0\1\20\7\0\6\20\1\21"+
    "\1\20\3\0\2\22\1\0\1\22\1\0\1\23\5\0"+
    "\10\22\3\0\2\20\1\0\1\20\7\0\1\20\1\24"+
    "\6\20\3\0\1\25\25\0\2\26\1\0\1\26\7\0"+
    "\10\26\3\0\2\26\1\0\1\26\7\0\7\26\1\27"+
    "\3\0\2\26\1\0\1\26\7\0\2\26\1\30\5\26"+
    "\3\0\1\25\2\0\1\31\22\0\2\32\1\0\1\32"+
    "\7\0\10\32\3\0\2\32\1\0\1\32\7\0\3\32"+
    "\1\33\4\32\3\0\1\34\3\0\1\35\21\0\2\36"+
    "\1\0\1\36\7\0\10\36\3\0\2\36\1\0\1\36"+
    "\7\0\1\36\1\37\6\36\3\0\1\34\25\0\2\40"+
    "\1\0\1\40\7\0\10\40\3\0\2\40\1\0\1\40"+
    "\7\0\4\40\1\41\3\40\3\0\2\42\1\0\1\42"+
    "\7\0\10\42\3\0\2\42\1\0\1\42\7\0\5\42"+
    "\1\43\2\42\3\0\2\44\1\0\1\44\7\0\10\44"+
    "\3\0\2\45\1\0\1\45\7\0\10\45\3\0\2\46"+
    "\1\0\1\46\7\0\10\46\3\0\2\47\1\0\1\47"+
    "\7\0\10\47\3\0\2\50\1\0\1\50\7\0\10\50"+
    "\3\0\2\51\1\0\1\51\7\0\10\51\3\0\2\52"+
    "\1\0\1\52\7\0\10\52\3\0\2\53\1\0\1\53"+
    "\7\0\10\53\3\0\2\54\1\0\1\54\7\0\10\54"+
    "\3\0\2\55\1\0\1\55\7\0\10\55\3\0\2\56"+
    "\1\0\1\56\7\0\10\56\3\0\2\57\1\0\1\57"+
    "\7\0\10\57\3\0\2\60\1\0\1\60\7\0\10\60"+
    "\3\0\2\61\1\0\1\61\7\0\10\61\3\0\2\62"+
    "\1\0\1\62\7\0\10\62\3\0\2\63\1\0\1\63"+
    "\7\0\10\63\3\0\2\64\1\0\1\64\7\0\10\64"+
    "\3\0\2\65\1\0\1\65\7\0\10\65\3\0\2\66"+
    "\1\0\1\66\7\0\10\66\3\0\2\67\1\0\1\67"+
    "\7\0\10\67\3\0\2\70\1\0\1\70\7\0\10\70"+
    "\3\0\2\71\1\0\1\71\7\0\10\71\3\0\2\72"+
    "\1\0\1\72\7\0\10\72\3\0\2\73\1\0\1\73"+
    "\7\0\10\73\3\0\2\74\1\0\1\74\7\0\10\74"+
    "\3\0\2\75\1\0\1\75\7\0\10\75\3\0\2\76"+
    "\1\0\1\76\7\0\10\76\3\0\2\77\1\0\1\77"+
    "\7\0\10\77\3\0\2\100\1\0\1\100\7\0\10\100"+
    "\3\0\2\101\1\0\1\101\7\0\10\101\3\0\2\102"+
    "\1\0\1\102\7\0\10\102\3\0\2\103\1\0\1\103"+
    "\7\0\10\103\3\0\2\104\1\0\1\104\7\0\10\104"+
    "\3\0\2\105\1\0\1\105\7\0\10\105\3\0\2\106"+
    "\1\0\1\106\7\0\10\106\3\0\2\107\1\0\1\107"+
    "\7\0\10\107\3\0\2\110\1\0\1\110\7\0\10\110"+
    "\3\0\2\111\1\0\1\111\7\0\10\111\3\0\2\112"+
    "\1\0\1\112\7\0\10\112\3\0\2\113\1\0\1\113"+
    "\7\0\10\113\3\0\2\114\1\0\1\114\7\0\10\114"+
    "\3\0\2\115\1\0\1\115\7\0\10\115\3\0\2\116"+
    "\1\0\1\116\7\0\10\116\3\0\2\117\1\0\1\117"+
    "\7\0\10\117\3\0\2\120\1\0\1\120\7\0\10\120"+
    "\3\0\2\121\1\0\1\121\7\0\10\121\3\0\2\122"+
    "\1\0\1\122\7\0\10\122\3\0\2\123\1\0\1\123"+
    "\7\0\10\123\3\0\2\124\1\0\1\124\7\0\10\124"+
    "\3\0\2\125\1\0\1\125\7\0\10\125\3\0\2\126"+
    "\1\0\1\126\7\0\10\126\3\0\2\127\1\0\1\127"+
    "\7\0\10\127\3\0\2\130\1\0\1\130\7\0\10\130"+
    "\3\0\2\131\1\0\1\131\7\0\10\131\3\0\2\132"+
    "\1\0\1\132\7\0\10\132\3\0\2\133\1\0\1\133"+
    "\7\0\10\133\3\0\2\134\1\0\1\134\7\0\10\134"+
    "\3\0\2\135\1\0\1\135\7\0\10\135\3\0\2\136"+
    "\1\0\1\136\7\0\10\136\3\0\2\137\1\0\1\137"+
    "\7\0\10\137\3\0\2\140\1\0\1\140\7\0\10\140"+
    "\3\0\2\141\1\0\1\141\7\0\10\141\3\0\2\142"+
    "\1\0\1\142\7\0\10\142\3\0\2\143\1\0\1\143"+
    "\7\0\10\143\3\0\2\144\1\0\1\144\7\0\10\144"+
    "\3\0\2\145\1\0\1\145\7\0\10\145\3\0\2\146"+
    "\1\0\1\146\7\0\10\146\3\0\2\147\1\0\1\147"+
    "\7\0\10\147\3\0\2\150\1\0\1\150\7\0\10\150"+
    "\3\0\2\151\1\0\1\151\7\0\10\151\3\0\2\152"+
    "\1\0\1\152\7\0\10\152\3\0\2\153\1\0\1\153"+
    "\7\0\10\153\3\0\2\154\1\0\1\154\7\0\10\154"+
    "\3\0\2\155\1\0\1\155\7\0\10\155\3\0\2\156"+
    "\1\0\1\156\7\0\10\156\3\0\2\157\1\0\1\157"+
    "\7\0\10\157\3\0\2\160\1\0\1\160\7\0\10\160"+
    "\3\0\2\161\1\0\1\161\7\0\10\161\3\0\2\162"+
    "\1\0\1\162\7\0\10\162\3\0\2\163\1\0\1\163"+
    "\7\0\10\163\3\0\2\164\1\0\1\164\7\0\10\164"+
    "\3\0\2\165\1\0\1\165\7\0\10\165\3\0\2\166"+
    "\1\0\1\166\7\0\10\166\3\0\2\167\1\0\1\167"+
    "\7\0\10\167\3\0\2\170\1\0\1\170\7\0\10\170"+
    "\3\0\2\171\1\0\1\171\7\0\10\171\3\0\2\172"+
    "\1\0\1\172\7\0\10\172\3\0\2\173\1\0\1\173"+
    "\7\0\10\173\3\0\2\174\1\0\1\174\7\0\10\174"+
    "\3\0\2\175\1\0\1\175\7\0\10\175\3\0\2\176"+
    "\1\0\1\176\7\0\10\176\3\0\2\177\1\0\1\177"+
    "\7\0\10\177\3\0\2\200\1\0\1\200\7\0\10\200"+
    "\3\0\2\201\1\0\1\201\7\0\10\201\3\0\2\202"+
    "\1\0\1\202\7\0\10\202\3\0\2\203\1\0\1\203"+
    "\7\0\10\203\3\0\2\204\1\0\1\204\7\0\10\204"+
    "\3\0\2\205\1\0\1\205\7\0\10\205\3\0\2\206"+
    "\1\0\1\206\7\0\10\206\3\0\2\207\1\0\1\207"+
    "\7\0\10\207\3\0\2\210\1\0\1\210\7\0\10\210"+
    "\3\0\2\211\1\0\1\211\7\0\10\211\3\0\2\212"+
    "\1\0\1\212\7\0\10\212\3\0\2\213\1\0\1\213"+
    "\7\0\10\213\3\0\2\214\1\0\1\214\7\0\10\214"+
    "\3\0\2\215\1\0\1\215\7\0\10\215\3\0\2\216"+
    "\1\0\1\216\7\0\10\216\3\0\2\217\1\0\1\217"+
    "\7\0\10\217\3\0\2\220\1\0\1\220\7\0\10\220"+
    "\3\0\2\221\1\0\1\221\7\0\10\221\3\0\2\222"+
    "\1\0\1\222\7\0\10\222\3\0\2\223\1\0\1\223"+
    "\7\0\10\223\3\0\2\224\1\0\1\224\7\0\10\224"+
    "\3\0\2\225\1\0\1\225\7\0\10\225\3\0\2\226"+
    "\1\0\1\226\7\0\10\226\3\0\2\227\1\0\1\227"+
    "\7\0\10\227\3\0\2\230\1\0\1\230\7\0\10\230"+
    "\3\0\2\231\1\0\1\231\7\0\10\231\3\0\2\232"+
    "\1\0\1\232\7\0\10\232\3\0\2\233\1\0\1\233"+
    "\7\0\10\233\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3124];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\5\11\1\1\1\11"+
    "\1\0\2\1\1\0\1\11\5\1\1\0\3\1\1\0"+
    "\175\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static LinkedList<TError> tablaEL = new LinkedList<TError>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico " + yytext() + " Linea: " + yyline + " Columna: " + yycolumn);
                            TError datos = new TError(yytext(), "Error Lexico", "Simbolo no reconocido", yyline, yycolumn);
                            tablaEL.add(datos);
            }
          case 13: break;
          case 2: 
            { System.out.println("Reconocio: " + yytext() + " Literal");
                                return new Symbol(Simbolos.lit, yycolumn, yyline, yytext());
            }
          case 14: break;
          case 3: 
            { System.out.println("Reconocio: " + yytext() + " ID");
                                return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 15: break;
          case 4: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 16: break;
          case 5: 
            { System.out.println("Reconocio: " + yytext()); 
                                return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 17: break;
          case 6: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 18: break;
          case 7: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            }
          case 19: break;
          case 8: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.para, yycolumn, yyline, yytext());
            }
          case 20: break;
          case 9: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.parc, yycolumn, yyline, yytext());
            }
          case 21: break;
          case 10: 
            { /*Ignora los espacios*/
            }
          case 22: break;
          case 11: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.term, yycolumn, yyline, yytext());
            }
          case 23: break;
          case 12: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.RW, yycolumn, yyline, yytext());
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
