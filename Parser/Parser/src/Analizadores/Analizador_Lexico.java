/* The following code was generated by JFlex 1.6.1 */

/*------------------1er Area: Codigo de Ususario--------------*/
//-----> Paquetes, importaciones
package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/*------------------2da Area: Opciones y Declaraciones--------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 39, 39, 40, 39, 39,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    39,  0,  6,  0,  0,  0,  0,  0, 11, 12,  9,  8, 28,  5,  3, 10, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 29, 30, 37,  7, 36,  0, 
     0, 17, 19, 26, 23,  4, 24, 16, 32, 21,  2,  2, 31, 18, 22, 15, 
    13,  2, 14, 34, 27, 25, 35, 38,  2,  2,  2,  0,  0,  0,  0,  0, 
     0, 17, 19, 26, 23,  4, 24, 16, 32, 21,  2,  2, 31, 18, 22, 15, 
    13,  2, 14, 34, 27, 25, 35, 38,  2,  2,  2,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\6\3\1\1\6\3\1\13"+
    "\1\14\1\15\1\3\1\1\2\3\1\16\1\17\1\3"+
    "\1\20\1\0\3\3\1\21\1\22\1\0\1\23\1\24"+
    "\1\25\1\26\1\27\2\3\1\30\4\3\1\0\1\31"+
    "\1\3\1\31\1\3\1\32\1\0\5\3\1\33\1\3"+
    "\1\34\1\3\2\0\3\3\1\35\1\36\1\37\2\3"+
    "\1\2\1\3\1\40\1\0\3\3\1\41\1\42\2\3"+
    "\2\43\1\44\2\45\1\46\5\3\2\0\2\3\1\47"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\50\2\3"+
    "\1\51\1\52\1\0\3\3\1\0\1\3\1\53\1\54"+
    "\1\3\2\0\2\3\1\0\1\3\1\0\1\3\1\2"+
    "\1\0\3\3\2\55\2\3\2\56\1\0\1\3\2\0"+
    "\2\3\2\57\2\60\4\3\1\0\1\3\1\0\1\3"+
    "\1\61\1\0\1\61\2\3\1\62\1\3\1\63\1\0"+
    "\1\3\2\64\1\0\3\3\2\65\2\66\1\3\1\67"+
    "\166\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\51"+
    "\0\u011f\0\u0148\0\u0171\0\51\0\51\0\u019a\0\u01c3\0\u01ec"+
    "\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334"+
    "\0\u035d\0\u0386\0\51\0\u03af\0\51\0\u03d8\0\u0401\0\u042a"+
    "\0\u0453\0\u047c\0\u04a5\0\u04ce\0\51\0\u04f7\0\u0520\0\u0549"+
    "\0\u0572\0\51\0\51\0\366\0\51\0\51\0\51\0\51"+
    "\0\51\0\u059b\0\u05c4\0\u0520\0\u05ed\0\u0616\0\u063f\0\u0668"+
    "\0\u0691\0\51\0\u06ba\0\u0520\0\u06e3\0\u0520\0\u070c\0\u0735"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0520\0\u0802\0\51\0\u082b"+
    "\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\51\0\51\0\51"+
    "\0\u0921\0\u094a\0\u0973\0\u099c\0\u099c\0\u09c5\0\u09ee\0\u0a17"+
    "\0\u0a40\0\u099c\0\u099c\0\u0a69\0\u0a92\0\51\0\u099c\0\u099c"+
    "\0\51\0\u099c\0\u099c\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f"+
    "\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u099c\0\u0c2c\0\u0c55\0\u0c7e"+
    "\0\u0ca7\0\u0cd0\0\u0cf9\0\51\0\u0cf9\0\u0d22\0\u0d4b\0\u0cf9"+
    "\0\u0cf9\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0cf9"+
    "\0\u0cf9\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u0fdb\0\u1004\0\u102d\0\u1056\0\51"+
    "\0\u1004\0\u107f\0\u10a8\0\51\0\u1004\0\u10d1\0\u10fa\0\u1123"+
    "\0\u114c\0\u1175\0\u119e\0\51\0\u1004\0\51\0\u1004\0\u11c7"+
    "\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\51"+
    "\0\u130f\0\u11c7\0\u1338\0\u1361\0\u1361\0\u138a\0\u1361\0\u13b3"+
    "\0\u13dc\0\51\0\u1361\0\u1405\0\u142e\0\u1457\0\u1480\0\51"+
    "\0\u1457\0\51\0\u1457\0\u14a9\0\u14a9\0\u14d2\0\u14fb\0\u1524"+
    "\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c"+
    "\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4"+
    "\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc"+
    "\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44"+
    "\0\u1a6d\0\u1a96\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c"+
    "\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4"+
    "\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c"+
    "\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64"+
    "\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac"+
    "\0\u20d5\0\u20fe\0\u2127\0\u2150\0\u2179\0\u21a2\0\u21cb\0\u21f4"+
    "\0\u221d\0\u2246\0\u226f\0\u2298\0\u22c1\0\u22ea\0\u2313\0\u233c"+
    "\0\u2365\0\u238e\0\u23b7\0\u23e0\0\u2409\0\u2432\0\u245b\0\u2484"+
    "\0\u24ad\0\u24d6\0\u24ff\0\u2528\0\u2551\0\u257a\0\u25a3\0\u25cc"+
    "\0\u25f5\0\u261e\0\u2647\0\u2670\0\u2699\0\u26c2\0\u26eb\0\u2714"+
    "\0\u273d\0\u2766\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\4\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\4\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\4\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\53\0\1\3\1\0\1\46\46\0\2\47\1\0\1\47"+
    "\10\0\7\47\1\0\7\47\3\0\2\47\1\0\2\47"+
    "\2\0\1\47\3\0\2\47\1\0\1\47\10\0\7\47"+
    "\1\0\1\47\1\50\5\47\3\0\1\51\1\47\1\0"+
    "\2\47\2\0\1\47\7\0\1\52\1\0\1\53\42\0"+
    "\2\54\1\0\1\54\1\0\1\55\6\0\7\54\1\0"+
    "\7\54\3\0\2\54\1\0\2\54\2\0\1\54\11\0"+
    "\1\56\1\57\47\0\1\60\50\0\1\61\42\0\2\47"+
    "\1\0\1\47\10\0\1\47\1\62\5\47\1\0\7\47"+
    "\3\0\2\47\1\0\2\47\2\0\1\47\3\0\2\47"+
    "\1\0\1\63\10\0\7\47\1\0\7\47\3\0\2\47"+
    "\1\0\2\47\2\0\1\47\3\0\2\47\1\0\1\47"+
    "\10\0\1\47\1\64\5\47\1\0\7\47\3\0\2\47"+
    "\1\0\2\47\2\0\1\47\3\0\2\47\1\0\1\47"+
    "\10\0\7\47\1\0\1\47\1\65\5\47\3\0\2\47"+
    "\1\0\2\47\2\0\1\47\3\0\2\47\1\0\1\47"+
    "\10\0\2\47\1\66\4\47\1\0\7\47\3\0\2\47"+
    "\1\0\2\47\2\0\1\47\3\0\2\47\1\0\1\67"+
    "\10\0\2\47\1\70\4\47\1\0\7\47\3\0\2\47"+
    "\1\0\2\47\2\0\1\47\30\0\1\71\1\0\1\72"+
    "\21\0\2\47\1\0\1\47\10\0\7\47\1\0\1\47"+
    "\1\73\1\47\1\74\3\47\3\0\2\47\1\0\2\47"+
    "\2\0\1\47\3\0\2\47\1\0\1\47\10\0\2\47"+
    "\1\75\4\47\1\0\7\47\3\0\2\47\1\0\2\47"+
    "\2\0\1\47\3\0\2\47\1\0\1\47\10\0\2\47"+
    "\1\76\4\47\1\77\1\100\6\47\3\0\2\47\1\0"+
    "\2\47\2\0\1\47\3\0\2\47\1\0\1\47\10\0"+
    "\2\47\1\101\4\47\1\0\4\47\1\102\2\47\3\0"+
    "\2\47\1\0\2\47\2\0\1\47\3\0\2\47\1\0"+
    "\1\47\10\0\2\47\1\103\4\47\1\0\7\47\3\0"+
    "\1\47\1\104\1\0\2\47\2\0\1\47\3\0\2\47"+
    "\1\0\1\47\10\0\2\47\1\105\4\47\1\0\7\47"+
    "\3\0\1\47\1\106\1\0\2\47\2\0\1\47\11\0"+
    "\1\107\42\0\2\47\1\0\1\47\10\0\2\47\1\110"+
    "\4\47\1\0\7\47\3\0\2\47\1\0\2\47\2\0"+
    "\1\47\35\0\1\111\4\0\1\112\11\0\2\47\1\0"+
    "\1\47\10\0\7\47\1\0\6\47\1\113\3\0\1\47"+
    "\1\114\1\0\2\47\2\0\1\47\3\0\2\47\1\0"+
    "\1\47\10\0\4\47\1\115\2\47\1\0\7\47\3\0"+
    "\2\47\1\0\2\47\2\0\1\47\11\0\1\116\50\0"+
    "\1\117\34\0\1\120\5\0\2\47\1\0\1\47\10\0"+
    "\1\47\1\121\5\47\1\0\7\47\3\0\1\47\1\122"+
    "\1\0\2\47\2\0\1\47\3\0\1\123\50\0\2\124"+
    "\1\0\1\124\10\0\7\124\1\0\7\124\3\0\2\124"+
    "\1\0\2\124\2\0\1\124\3\0\2\124\1\0\1\124"+
    "\10\0\7\124\1\0\2\124\1\125\4\124\3\0\2\124"+
    "\1\0\2\124\2\0\1\124\3\0\2\124\1\0\1\124"+
    "\10\0\7\124\1\0\7\124\3\0\2\124\1\126\1\127"+
    "\1\124\2\0\1\124\3\0\2\124\1\0\1\124\10\0"+
    "\2\124\1\130\4\124\1\0\7\124\3\0\2\124\1\0"+
    "\2\124\2\0\1\124\3\0\2\124\1\0\1\124\10\0"+
    "\4\124\1\131\2\124\1\0\7\124\3\0\2\124\1\0"+
    "\2\124\2\0\1\124\3\0\2\124\1\0\1\124\10\0"+
    "\7\124\1\0\2\124\1\132\4\124\3\0\2\124\1\0"+
    "\2\124\2\0\1\124\3\0\2\124\1\0\1\124\10\0"+
    "\7\124\1\0\2\124\1\133\4\124\3\0\2\124\1\0"+
    "\2\124\2\0\1\124\3\0\2\124\1\0\1\124\10\0"+
    "\3\124\1\134\3\124\1\0\7\124\3\0\2\124\1\0"+
    "\2\124\2\0\1\124\3\0\2\124\1\0\1\124\10\0"+
    "\2\124\1\135\4\124\1\0\7\124\3\0\2\124\1\0"+
    "\2\124\2\0\1\124\35\0\1\136\16\0\2\124\1\0"+
    "\1\124\10\0\7\124\1\0\6\124\1\137\3\0\2\124"+
    "\1\0\2\124\2\0\1\124\3\0\2\124\1\0\1\124"+
    "\10\0\7\124\1\0\6\124\1\140\3\0\2\124\1\0"+
    "\2\124\2\0\1\124\45\0\1\141\6\0\2\124\1\0"+
    "\1\124\10\0\7\124\1\0\7\124\3\0\2\124\1\0"+
    "\1\124\1\142\2\0\1\124\3\0\2\124\1\0\1\124"+
    "\10\0\1\124\1\143\5\124\1\0\7\124\3\0\2\124"+
    "\1\0\2\124\2\0\1\124\3\0\2\124\1\0\1\124"+
    "\10\0\7\124\1\0\1\124\1\144\5\124\3\0\2\124"+
    "\1\0\2\124\2\0\1\124\3\0\2\124\1\0\1\124"+
    "\10\0\7\124\1\0\1\124\1\145\5\124\3\0\2\124"+
    "\1\0\2\124\2\0\1\124\3\0\2\124\1\0\1\124"+
    "\10\0\4\124\1\146\2\124\1\0\7\124\3\0\2\124"+
    "\1\0\2\124\2\0\1\124\3\0\2\124\1\0\1\147"+
    "\10\0\7\124\1\0\7\124\3\0\2\124\1\0\2\124"+
    "\2\0\1\124\3\0\2\124\1\0\1\124\10\0\7\124"+
    "\1\0\1\124\1\150\5\124\3\0\2\124\1\0\2\124"+
    "\2\0\1\124\20\0\1\151\51\0\1\152\32\0\2\124"+
    "\1\0\1\124\10\0\1\124\1\153\5\124\1\0\7\124"+
    "\3\0\2\124\1\0\2\124\2\0\1\124\3\0\2\124"+
    "\1\0\1\124\10\0\2\124\1\154\4\124\1\0\7\124"+
    "\3\0\2\124\1\0\2\124\2\0\1\124\3\0\2\124"+
    "\1\0\1\124\10\0\1\124\1\155\5\124\1\0\7\124"+
    "\3\0\2\124\1\0\2\124\2\0\1\124\3\0\2\124"+
    "\1\0\1\124\10\0\7\124\1\156\1\157\6\124\3\0"+
    "\2\124\1\0\2\124\2\0\1\124\3\0\2\124\1\0"+
    "\1\124\10\0\7\124\1\160\1\161\6\124\3\0\2\124"+
    "\1\0\2\124\2\0\1\124\3\0\1\123\2\0\1\162"+
    "\45\0\2\163\1\0\1\163\10\0\7\163\1\0\7\163"+
    "\3\0\2\163\1\0\2\163\2\0\1\163\6\0\1\164"+
    "\45\0\2\163\1\0\1\165\10\0\7\163\1\0\7\163"+
    "\3\0\2\163\1\0\2\163\2\0\1\163\3\0\2\163"+
    "\1\0\1\163\10\0\3\163\1\166\3\163\1\0\5\163"+
    "\1\167\1\163\3\0\2\163\1\0\2\163\2\0\1\163"+
    "\3\0\2\163\1\0\1\163\10\0\7\163\1\0\2\163"+
    "\1\170\4\163\3\0\1\171\1\163\1\0\2\163\2\0"+
    "\1\163\3\0\2\163\1\0\1\163\10\0\7\163\1\172"+
    "\1\173\6\163\3\0\2\163\1\0\2\163\2\0\1\163"+
    "\3\0\2\163\1\0\1\163\10\0\7\163\1\0\7\163"+
    "\3\0\1\174\1\163\1\0\2\163\2\0\1\163\3\0"+
    "\2\163\1\0\1\163\10\0\7\163\1\0\5\163\1\175"+
    "\1\163\3\0\2\163\1\0\2\163\2\0\1\163\3\0"+
    "\2\163\1\0\1\163\10\0\7\163\1\0\7\163\3\0"+
    "\2\163\1\176\1\177\1\163\2\0\1\163\3\0\2\163"+
    "\1\0\1\163\10\0\1\163\1\200\5\163\1\0\7\163"+
    "\3\0\2\163\1\0\2\163\2\0\1\163\3\0\2\163"+
    "\1\0\1\163\10\0\7\163\1\0\1\163\1\201\5\163"+
    "\3\0\2\163\1\0\2\163\2\0\1\163\3\0\2\163"+
    "\1\0\1\163\10\0\3\163\1\202\3\163\1\0\7\163"+
    "\3\0\2\163\1\0\2\163\2\0\1\163\26\0\2\203"+
    "\41\0\1\204\33\0\2\163\1\0\1\163\10\0\7\163"+
    "\1\203\1\205\6\163\3\0\2\163\1\0\2\163\2\0"+
    "\1\163\3\0\2\163\1\0\1\163\10\0\1\163\1\206"+
    "\5\163\1\0\7\163\3\0\2\163\1\0\2\163\2\0"+
    "\1\163\35\0\1\207\16\0\2\163\1\0\1\163\10\0"+
    "\7\163\1\0\6\163\1\210\3\0\2\163\1\0\2\163"+
    "\2\0\1\163\41\0\1\211\12\0\2\163\1\0\1\163"+
    "\10\0\7\163\1\0\7\163\3\0\1\212\1\163\1\0"+
    "\2\163\2\0\1\163\3\0\1\213\3\0\1\214\44\0"+
    "\2\215\1\0\1\215\10\0\7\215\1\0\7\215\3\0"+
    "\2\215\1\0\2\215\2\0\1\215\3\0\2\215\1\0"+
    "\1\215\10\0\1\215\1\216\5\215\1\0\7\215\3\0"+
    "\2\215\1\0\2\215\2\0\1\215\3\0\2\215\1\0"+
    "\1\217\10\0\7\215\1\0\7\215\3\0\2\215\1\0"+
    "\2\215\2\0\1\215\30\0\1\220\23\0\2\215\1\0"+
    "\1\215\10\0\7\215\1\0\1\215\1\221\5\215\3\0"+
    "\2\215\1\0\2\215\2\0\1\215\3\0\2\215\1\0"+
    "\1\222\10\0\7\215\1\0\7\215\3\0\2\215\1\0"+
    "\2\215\2\0\1\215\3\0\2\215\1\0\1\215\10\0"+
    "\7\215\1\0\6\215\1\223\3\0\2\215\1\0\2\215"+
    "\2\0\1\215\35\0\1\224\16\0\2\215\1\0\1\215"+
    "\10\0\7\215\1\0\6\215\1\225\3\0\2\215\1\0"+
    "\2\215\2\0\1\215\3\0\2\215\1\0\1\215\10\0"+
    "\7\215\1\226\1\227\6\215\3\0\2\215\1\0\2\215"+
    "\2\0\1\215\30\0\1\230\55\0\1\231\16\0\2\215"+
    "\1\0\1\215\10\0\7\215\1\0\1\215\1\232\5\215"+
    "\3\0\2\215\1\0\2\215\2\0\1\215\3\0\2\215"+
    "\1\0\1\215\10\0\7\215\1\0\6\215\1\233\3\0"+
    "\2\215\1\0\2\215\2\0\1\215\6\0\1\234\45\0"+
    "\2\215\1\0\1\235\10\0\7\215\1\0\7\215\3\0"+
    "\2\215\1\0\2\215\2\0\1\215\6\0\1\236\45\0"+
    "\2\215\1\0\1\237\10\0\7\215\1\0\7\215\3\0"+
    "\2\215\1\0\2\215\2\0\1\215\3\0\1\213\50\0"+
    "\2\240\1\0\1\240\10\0\7\240\1\0\7\240\3\0"+
    "\2\240\1\0\2\240\2\0\1\240\3\0\2\240\1\0"+
    "\1\240\10\0\4\240\1\241\2\240\1\0\7\240\3\0"+
    "\2\240\1\0\2\240\2\0\1\240\3\0\2\240\1\0"+
    "\1\240\10\0\7\240\1\0\2\240\1\242\4\240\3\0"+
    "\2\240\1\0\2\240\2\0\1\240\3\0\2\240\1\0"+
    "\1\240\10\0\4\240\1\243\2\240\1\0\7\240\3\0"+
    "\2\240\1\0\2\240\2\0\1\240\3\0\2\240\1\0"+
    "\1\240\10\0\7\240\1\244\1\245\6\240\3\0\2\240"+
    "\1\0\2\240\2\0\1\240\30\0\1\246\23\0\2\240"+
    "\1\0\1\240\10\0\7\240\1\0\1\240\1\247\5\240"+
    "\3\0\2\240\1\0\2\240\2\0\1\240\22\0\1\250"+
    "\54\0\2\251\24\0\2\240\1\0\1\240\10\0\3\240"+
    "\1\252\3\240\1\0\7\240\3\0\2\240\1\0\2\240"+
    "\2\0\1\240\3\0\2\240\1\0\1\240\10\0\7\240"+
    "\1\251\1\253\6\240\3\0\2\240\1\0\2\240\2\0"+
    "\1\240\3\0\2\254\1\0\1\254\10\0\7\254\1\0"+
    "\7\254\3\0\2\254\1\0\2\254\2\0\1\254\3\0"+
    "\2\254\1\0\1\254\10\0\5\254\1\255\1\254\1\0"+
    "\7\254\3\0\2\254\1\0\2\254\2\0\1\254\3\0"+
    "\2\254\1\0\1\254\10\0\7\254\1\0\4\254\1\256"+
    "\2\254\3\0\2\254\1\0\2\254\2\0\1\254\3\0"+
    "\2\254\1\0\1\254\10\0\7\254\1\0\1\254\1\257"+
    "\5\254\3\0\2\254\1\0\2\254\2\0\1\254\21\0"+
    "\1\260\32\0\2\254\1\0\1\254\10\0\2\254\1\261"+
    "\4\254\1\0\7\254\3\0\2\254\1\0\2\254\2\0"+
    "\1\254\35\0\1\262\16\0\2\254\1\0\1\254\10\0"+
    "\7\254\1\0\6\254\1\263\3\0\2\254\1\0\2\254"+
    "\2\0\1\254\30\0\1\264\23\0\2\254\1\0\1\254"+
    "\10\0\7\254\1\0\1\254\1\265\5\254\3\0\2\254"+
    "\1\0\2\254\2\0\1\254\3\0\2\266\1\0\1\266"+
    "\10\0\7\266\1\0\7\266\3\0\2\266\1\0\2\266"+
    "\2\0\1\266\3\0\2\266\1\0\1\266\10\0\1\266"+
    "\1\267\5\266\1\0\7\266\3\0\2\266\1\0\2\266"+
    "\2\0\1\266\30\0\1\270\23\0\2\266\1\0\1\266"+
    "\10\0\7\266\1\0\1\266\1\271\5\266\3\0\2\266"+
    "\1\0\2\266\2\0\1\266\35\0\1\272\16\0\2\266"+
    "\1\0\1\266\10\0\7\266\1\0\6\266\1\273\3\0"+
    "\2\266\1\0\2\266\2\0\1\266\3\0\2\274\1\0"+
    "\1\274\10\0\7\274\1\0\7\274\3\0\2\274\1\0"+
    "\2\274\2\0\1\274\3\0\2\274\1\0\1\275\10\0"+
    "\7\274\1\0\7\274\3\0\2\274\1\0\2\274\2\0"+
    "\1\274\3\0\2\276\1\0\1\276\10\0\7\276\1\0"+
    "\7\276\3\0\2\276\1\0\2\276\2\0\1\276\3\0"+
    "\2\277\1\0\1\277\10\0\7\277\1\0\7\277\3\0"+
    "\2\277\1\0\2\277\2\0\1\277\3\0\2\300\1\0"+
    "\1\300\10\0\7\300\1\0\7\300\3\0\2\300\1\0"+
    "\2\300\2\0\1\300\3\0\2\301\1\0\1\301\10\0"+
    "\7\301\1\0\7\301\3\0\2\301\1\0\2\301\2\0"+
    "\1\301\3\0\2\302\1\0\1\302\10\0\7\302\1\0"+
    "\7\302\3\0\2\302\1\0\2\302\2\0\1\302\3\0"+
    "\2\303\1\0\1\303\10\0\7\303\1\0\7\303\3\0"+
    "\2\303\1\0\2\303\2\0\1\303\3\0\2\304\1\0"+
    "\1\304\10\0\7\304\1\0\7\304\3\0\2\304\1\0"+
    "\2\304\2\0\1\304\3\0\2\305\1\0\1\305\10\0"+
    "\7\305\1\0\7\305\3\0\2\305\1\0\2\305\2\0"+
    "\1\305\3\0\2\306\1\0\1\306\10\0\7\306\1\0"+
    "\7\306\3\0\2\306\1\0\2\306\2\0\1\306\3\0"+
    "\2\307\1\0\1\307\10\0\7\307\1\0\7\307\3\0"+
    "\2\307\1\0\2\307\2\0\1\307\3\0\2\310\1\0"+
    "\1\310\10\0\7\310\1\0\7\310\3\0\2\310\1\0"+
    "\2\310\2\0\1\310\3\0\2\311\1\0\1\311\10\0"+
    "\7\311\1\0\7\311\3\0\2\311\1\0\2\311\2\0"+
    "\1\311\3\0\2\312\1\0\1\312\10\0\7\312\1\0"+
    "\7\312\3\0\2\312\1\0\2\312\2\0\1\312\3\0"+
    "\2\313\1\0\1\313\10\0\7\313\1\0\7\313\3\0"+
    "\2\313\1\0\2\313\2\0\1\313\3\0\2\314\1\0"+
    "\1\314\10\0\7\314\1\0\7\314\3\0\2\314\1\0"+
    "\2\314\2\0\1\314\3\0\2\315\1\0\1\315\10\0"+
    "\7\315\1\0\7\315\3\0\2\315\1\0\2\315\2\0"+
    "\1\315\3\0\2\316\1\0\1\316\10\0\7\316\1\0"+
    "\7\316\3\0\2\316\1\0\2\316\2\0\1\316\3\0"+
    "\2\317\1\0\1\317\10\0\7\317\1\0\7\317\3\0"+
    "\2\317\1\0\2\317\2\0\1\317\3\0\2\320\1\0"+
    "\1\320\10\0\7\320\1\0\7\320\3\0\2\320\1\0"+
    "\2\320\2\0\1\320\3\0\2\321\1\0\1\321\10\0"+
    "\7\321\1\0\7\321\3\0\2\321\1\0\2\321\2\0"+
    "\1\321\3\0\2\322\1\0\1\322\10\0\7\322\1\0"+
    "\7\322\3\0\2\322\1\0\2\322\2\0\1\322\3\0"+
    "\2\323\1\0\1\323\10\0\7\323\1\0\7\323\3\0"+
    "\2\323\1\0\2\323\2\0\1\323\3\0\2\324\1\0"+
    "\1\324\10\0\7\324\1\0\7\324\3\0\2\324\1\0"+
    "\2\324\2\0\1\324\3\0\2\325\1\0\1\325\10\0"+
    "\7\325\1\0\7\325\3\0\2\325\1\0\2\325\2\0"+
    "\1\325\3\0\2\326\1\0\1\326\10\0\7\326\1\0"+
    "\7\326\3\0\2\326\1\0\2\326\2\0\1\326\3\0"+
    "\2\327\1\0\1\327\10\0\7\327\1\0\7\327\3\0"+
    "\2\327\1\0\2\327\2\0\1\327\3\0\2\330\1\0"+
    "\1\330\10\0\7\330\1\0\7\330\3\0\2\330\1\0"+
    "\2\330\2\0\1\330\3\0\2\331\1\0\1\331\10\0"+
    "\7\331\1\0\7\331\3\0\2\331\1\0\2\331\2\0"+
    "\1\331\3\0\2\332\1\0\1\332\10\0\7\332\1\0"+
    "\7\332\3\0\2\332\1\0\2\332\2\0\1\332\3\0"+
    "\2\333\1\0\1\333\10\0\7\333\1\0\7\333\3\0"+
    "\2\333\1\0\2\333\2\0\1\333\3\0\2\334\1\0"+
    "\1\334\10\0\7\334\1\0\7\334\3\0\2\334\1\0"+
    "\2\334\2\0\1\334\3\0\2\335\1\0\1\335\10\0"+
    "\7\335\1\0\7\335\3\0\2\335\1\0\2\335\2\0"+
    "\1\335\3\0\2\336\1\0\1\336\10\0\7\336\1\0"+
    "\7\336\3\0\2\336\1\0\2\336\2\0\1\336\3\0"+
    "\2\337\1\0\1\337\10\0\7\337\1\0\7\337\3\0"+
    "\2\337\1\0\2\337\2\0\1\337\3\0\2\340\1\0"+
    "\1\340\10\0\7\340\1\0\7\340\3\0\2\340\1\0"+
    "\2\340\2\0\1\340\3\0\2\341\1\0\1\341\10\0"+
    "\7\341\1\0\7\341\3\0\2\341\1\0\2\341\2\0"+
    "\1\341\3\0\2\342\1\0\1\342\10\0\7\342\1\0"+
    "\7\342\3\0\2\342\1\0\2\342\2\0\1\342\3\0"+
    "\2\343\1\0\1\343\10\0\7\343\1\0\7\343\3\0"+
    "\2\343\1\0\2\343\2\0\1\343\3\0\2\344\1\0"+
    "\1\344\10\0\7\344\1\0\7\344\3\0\2\344\1\0"+
    "\2\344\2\0\1\344\3\0\2\345\1\0\1\345\10\0"+
    "\7\345\1\0\7\345\3\0\2\345\1\0\2\345\2\0"+
    "\1\345\3\0\2\346\1\0\1\346\10\0\7\346\1\0"+
    "\7\346\3\0\2\346\1\0\2\346\2\0\1\346\3\0"+
    "\2\347\1\0\1\347\10\0\7\347\1\0\7\347\3\0"+
    "\2\347\1\0\2\347\2\0\1\347\3\0\2\350\1\0"+
    "\1\350\10\0\7\350\1\0\7\350\3\0\2\350\1\0"+
    "\2\350\2\0\1\350\3\0\2\351\1\0\1\351\10\0"+
    "\7\351\1\0\7\351\3\0\2\351\1\0\2\351\2\0"+
    "\1\351\3\0\2\352\1\0\1\352\10\0\7\352\1\0"+
    "\7\352\3\0\2\352\1\0\2\352\2\0\1\352\3\0"+
    "\2\353\1\0\1\353\10\0\7\353\1\0\7\353\3\0"+
    "\2\353\1\0\2\353\2\0\1\353\3\0\2\354\1\0"+
    "\1\354\10\0\7\354\1\0\7\354\3\0\2\354\1\0"+
    "\2\354\2\0\1\354\3\0\2\355\1\0\1\355\10\0"+
    "\7\355\1\0\7\355\3\0\2\355\1\0\2\355\2\0"+
    "\1\355\3\0\2\356\1\0\1\356\10\0\7\356\1\0"+
    "\7\356\3\0\2\356\1\0\2\356\2\0\1\356\3\0"+
    "\2\357\1\0\1\357\10\0\7\357\1\0\7\357\3\0"+
    "\2\357\1\0\2\357\2\0\1\357\3\0\2\360\1\0"+
    "\1\360\10\0\7\360\1\0\7\360\3\0\2\360\1\0"+
    "\2\360\2\0\1\360\3\0\2\361\1\0\1\361\10\0"+
    "\7\361\1\0\7\361\3\0\2\361\1\0\2\361\2\0"+
    "\1\361\3\0\2\362\1\0\1\362\10\0\7\362\1\0"+
    "\7\362\3\0\2\362\1\0\2\362\2\0\1\362\3\0"+
    "\2\363\1\0\1\363\10\0\7\363\1\0\7\363\3\0"+
    "\2\363\1\0\2\363\2\0\1\363\3\0\2\364\1\0"+
    "\1\364\10\0\7\364\1\0\7\364\3\0\2\364\1\0"+
    "\2\364\2\0\1\364\3\0\2\365\1\0\1\365\10\0"+
    "\7\365\1\0\7\365\3\0\2\365\1\0\2\365\2\0"+
    "\1\365\3\0\2\366\1\0\1\366\10\0\7\366\1\0"+
    "\7\366\3\0\2\366\1\0\2\366\2\0\1\366\3\0"+
    "\2\367\1\0\1\367\10\0\7\367\1\0\7\367\3\0"+
    "\2\367\1\0\2\367\2\0\1\367\3\0\2\370\1\0"+
    "\1\370\10\0\7\370\1\0\7\370\3\0\2\370\1\0"+
    "\2\370\2\0\1\370\3\0\2\371\1\0\1\371\10\0"+
    "\7\371\1\0\7\371\3\0\2\371\1\0\2\371\2\0"+
    "\1\371\3\0\2\372\1\0\1\372\10\0\7\372\1\0"+
    "\7\372\3\0\2\372\1\0\2\372\2\0\1\372\3\0"+
    "\2\373\1\0\1\373\10\0\7\373\1\0\7\373\3\0"+
    "\2\373\1\0\2\373\2\0\1\373\3\0\2\374\1\0"+
    "\1\374\10\0\7\374\1\0\7\374\3\0\2\374\1\0"+
    "\2\374\2\0\1\374\3\0\2\375\1\0\1\375\10\0"+
    "\7\375\1\0\7\375\3\0\2\375\1\0\2\375\2\0"+
    "\1\375\3\0\2\376\1\0\1\376\10\0\7\376\1\0"+
    "\7\376\3\0\2\376\1\0\2\376\2\0\1\376\3\0"+
    "\2\377\1\0\1\377\10\0\7\377\1\0\7\377\3\0"+
    "\2\377\1\0\2\377\2\0\1\377\3\0\2\u0100\1\0"+
    "\1\u0100\10\0\7\u0100\1\0\7\u0100\3\0\2\u0100\1\0"+
    "\2\u0100\2\0\1\u0100\3\0\2\u0101\1\0\1\u0101\10\0"+
    "\7\u0101\1\0\7\u0101\3\0\2\u0101\1\0\2\u0101\2\0"+
    "\1\u0101\3\0\2\u0102\1\0\1\u0102\10\0\7\u0102\1\0"+
    "\7\u0102\3\0\2\u0102\1\0\2\u0102\2\0\1\u0102\3\0"+
    "\2\u0103\1\0\1\u0103\10\0\7\u0103\1\0\7\u0103\3\0"+
    "\2\u0103\1\0\2\u0103\2\0\1\u0103\3\0\2\u0104\1\0"+
    "\1\u0104\10\0\7\u0104\1\0\7\u0104\3\0\2\u0104\1\0"+
    "\2\u0104\2\0\1\u0104\3\0\2\u0105\1\0\1\u0105\10\0"+
    "\7\u0105\1\0\7\u0105\3\0\2\u0105\1\0\2\u0105\2\0"+
    "\1\u0105\3\0\2\u0106\1\0\1\u0106\10\0\7\u0106\1\0"+
    "\7\u0106\3\0\2\u0106\1\0\2\u0106\2\0\1\u0106\3\0"+
    "\2\u0107\1\0\1\u0107\10\0\7\u0107\1\0\7\u0107\3\0"+
    "\2\u0107\1\0\2\u0107\2\0\1\u0107\3\0\2\u0108\1\0"+
    "\1\u0108\10\0\7\u0108\1\0\7\u0108\3\0\2\u0108\1\0"+
    "\2\u0108\2\0\1\u0108\3\0\2\u0109\1\0\1\u0109\10\0"+
    "\7\u0109\1\0\7\u0109\3\0\2\u0109\1\0\2\u0109\2\0"+
    "\1\u0109\3\0\2\u010a\1\0\1\u010a\10\0\7\u010a\1\0"+
    "\7\u010a\3\0\2\u010a\1\0\2\u010a\2\0\1\u010a\3\0"+
    "\2\u010b\1\0\1\u010b\10\0\7\u010b\1\0\7\u010b\3\0"+
    "\2\u010b\1\0\2\u010b\2\0\1\u010b\3\0\2\u010c\1\0"+
    "\1\u010c\10\0\7\u010c\1\0\7\u010c\3\0\2\u010c\1\0"+
    "\2\u010c\2\0\1\u010c\3\0\2\u010d\1\0\1\u010d\10\0"+
    "\7\u010d\1\0\7\u010d\3\0\2\u010d\1\0\2\u010d\2\0"+
    "\1\u010d\3\0\2\u010e\1\0\1\u010e\10\0\7\u010e\1\0"+
    "\7\u010e\3\0\2\u010e\1\0\2\u010e\2\0\1\u010e\3\0"+
    "\2\u010f\1\0\1\u010f\10\0\7\u010f\1\0\7\u010f\3\0"+
    "\2\u010f\1\0\2\u010f\2\0\1\u010f\3\0\2\u0110\1\0"+
    "\1\u0110\10\0\7\u0110\1\0\7\u0110\3\0\2\u0110\1\0"+
    "\2\u0110\2\0\1\u0110\3\0\2\u0111\1\0\1\u0111\10\0"+
    "\7\u0111\1\0\7\u0111\3\0\2\u0111\1\0\2\u0111\2\0"+
    "\1\u0111\3\0\2\u0112\1\0\1\u0112\10\0\7\u0112\1\0"+
    "\7\u0112\3\0\2\u0112\1\0\2\u0112\2\0\1\u0112\3\0"+
    "\2\u0113\1\0\1\u0113\10\0\7\u0113\1\0\7\u0113\3\0"+
    "\2\u0113\1\0\2\u0113\2\0\1\u0113\3\0\2\u0114\1\0"+
    "\1\u0114\10\0\7\u0114\1\0\7\u0114\3\0\2\u0114\1\0"+
    "\2\u0114\2\0\1\u0114\3\0\2\u0115\1\0\1\u0115\10\0"+
    "\7\u0115\1\0\7\u0115\3\0\2\u0115\1\0\2\u0115\2\0"+
    "\1\u0115\3\0\2\u0116\1\0\1\u0116\10\0\7\u0116\1\0"+
    "\7\u0116\3\0\2\u0116\1\0\2\u0116\2\0\1\u0116\3\0"+
    "\2\u0117\1\0\1\u0117\10\0\7\u0117\1\0\7\u0117\3\0"+
    "\2\u0117\1\0\2\u0117\2\0\1\u0117\3\0\2\u0118\1\0"+
    "\1\u0118\10\0\7\u0118\1\0\7\u0118\3\0\2\u0118\1\0"+
    "\2\u0118\2\0\1\u0118\3\0\2\u0119\1\0\1\u0119\10\0"+
    "\7\u0119\1\0\7\u0119\3\0\2\u0119\1\0\2\u0119\2\0"+
    "\1\u0119\3\0\2\u011a\1\0\1\u011a\10\0\7\u011a\1\0"+
    "\7\u011a\3\0\2\u011a\1\0\2\u011a\2\0\1\u011a\3\0"+
    "\2\u011b\1\0\1\u011b\10\0\7\u011b\1\0\7\u011b\3\0"+
    "\2\u011b\1\0\2\u011b\2\0\1\u011b\3\0\2\u011c\1\0"+
    "\1\u011c\10\0\7\u011c\1\0\7\u011c\3\0\2\u011c\1\0"+
    "\2\u011c\2\0\1\u011c\3\0\2\u011d\1\0\1\u011d\10\0"+
    "\7\u011d\1\0\7\u011d\3\0\2\u011d\1\0\2\u011d\2\0"+
    "\1\u011d\3\0\2\u011e\1\0\1\u011e\10\0\7\u011e\1\0"+
    "\7\u011e\3\0\2\u011e\1\0\2\u011e\2\0\1\u011e\3\0"+
    "\2\u011f\1\0\1\u011f\10\0\7\u011f\1\0\7\u011f\3\0"+
    "\2\u011f\1\0\2\u011f\2\0\1\u011f\3\0\2\u0120\1\0"+
    "\1\u0120\10\0\7\u0120\1\0\7\u0120\3\0\2\u0120\1\0"+
    "\2\u0120\2\0\1\u0120\3\0\2\u0121\1\0\1\u0121\10\0"+
    "\7\u0121\1\0\7\u0121\3\0\2\u0121\1\0\2\u0121\2\0"+
    "\1\u0121\3\0\2\u0122\1\0\1\u0122\10\0\7\u0122\1\0"+
    "\7\u0122\3\0\2\u0122\1\0\2\u0122\2\0\1\u0122\3\0"+
    "\2\u0123\1\0\1\u0123\10\0\7\u0123\1\0\7\u0123\3\0"+
    "\2\u0123\1\0\2\u0123\2\0\1\u0123\3\0\2\u0124\1\0"+
    "\1\u0124\10\0\7\u0124\1\0\7\u0124\3\0\2\u0124\1\0"+
    "\2\u0124\2\0\1\u0124\3\0\2\u0125\1\0\1\u0125\10\0"+
    "\7\u0125\1\0\7\u0125\3\0\2\u0125\1\0\2\u0125\2\0"+
    "\1\u0125\3\0\2\u0126\1\0\1\u0126\10\0\7\u0126\1\0"+
    "\7\u0126\3\0\2\u0126\1\0\2\u0126\2\0\1\u0126\3\0"+
    "\2\u0127\1\0\1\u0127\10\0\7\u0127\1\0\7\u0127\3\0"+
    "\2\u0127\1\0\2\u0127\2\0\1\u0127\3\0\2\u0128\1\0"+
    "\1\u0128\10\0\7\u0128\1\0\7\u0128\3\0\2\u0128\1\0"+
    "\2\u0128\2\0\1\u0128\3\0\2\u0129\1\0\1\u0129\10\0"+
    "\7\u0129\1\0\7\u0129\3\0\2\u0129\1\0\2\u0129\2\0"+
    "\1\u0129\3\0\2\u012a\1\0\1\u012a\10\0\7\u012a\1\0"+
    "\7\u012a\3\0\2\u012a\1\0\2\u012a\2\0\1\u012a\3\0"+
    "\2\u012b\1\0\1\u012b\10\0\7\u012b\1\0\7\u012b\3\0"+
    "\2\u012b\1\0\2\u012b\2\0\1\u012b\3\0\2\u012c\1\0"+
    "\1\u012c\10\0\7\u012c\1\0\7\u012c\3\0\2\u012c\1\0"+
    "\2\u012c\2\0\1\u012c\3\0\2\u012d\1\0\1\u012d\10\0"+
    "\7\u012d\1\0\7\u012d\3\0\2\u012d\1\0\2\u012d\2\0"+
    "\1\u012d\3\0\2\u012e\1\0\1\u012e\10\0\7\u012e\1\0"+
    "\7\u012e\3\0\2\u012e\1\0\2\u012e\2\0\1\u012e\3\0"+
    "\2\u012f\1\0\1\u012f\10\0\7\u012f\1\0\7\u012f\3\0"+
    "\2\u012f\1\0\2\u012f\2\0\1\u012f\3\0\2\u0130\1\0"+
    "\1\u0130\10\0\7\u0130\1\0\7\u0130\3\0\2\u0130\1\0"+
    "\2\u0130\2\0\1\u0130\3\0\2\u0131\1\0\1\u0131\10\0"+
    "\7\u0131\1\0\7\u0131\3\0\2\u0131\1\0\2\u0131\2\0"+
    "\1\u0131\3\0\2\u0132\1\0\1\u0132\10\0\7\u0132\1\0"+
    "\7\u0132\3\0\2\u0132\1\0\2\u0132\2\0\1\u0132\3\0"+
    "\2\u0133\1\0\1\u0133\10\0\7\u0133\1\0\7\u0133\3\0"+
    "\2\u0133\1\0\2\u0133\2\0\1\u0133\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10127];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\3\1\2\11\15\1\1\11"+
    "\1\1\1\11\7\1\1\11\1\0\3\1\2\11\1\0"+
    "\5\11\7\1\1\0\1\11\4\1\1\0\7\1\1\11"+
    "\1\1\2\0\3\1\3\11\5\1\1\0\7\1\1\11"+
    "\2\1\1\11\7\1\2\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\5\1\1\0\3\1\1\0"+
    "\4\1\2\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\11\3\1\1\11\1\1\1\0\1\1\2\0"+
    "\2\1\1\11\1\1\1\11\5\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\6\1\1\0\1\1\1\11\1\1"+
    "\1\0\3\1\1\11\1\1\1\11\170\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static LinkedList<TError> tablaEL = new LinkedList<TError>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico " + yytext() + " Linea: " + yyline + " Columna: ");
                            tablaEL.add(new TError(yytext(), yyline));
            }
          case 56: break;
          case 2: 
            { System.out.println("Reconocio: " + yytext() + " Literal");
                                return new Symbol(Simbolos.NUM, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 3: 
            { System.out.println("Reconocio: " + yytext() + " ID");
                                return new Symbol(Simbolos.ID, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 4: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MENOS, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 5: 
            { System.out.println("Reconocio: " + yytext()); 
                                return new Symbol(Simbolos.IGUALAR, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 6: 
            { System.out.println("Reconocio: " + yytext()); 
                                return new Symbol(Simbolos.MAS, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 7: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MULT, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 8: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.DIVICION, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 9: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.para, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 10: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.parc, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 11: 
            { System.out.println("Reconocio: " + yytext()); 
                                return new Symbol(Simbolos.COMA, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 12: 
            { System.out.println("Reconocio: " + yytext()); 
                                return new Symbol(Simbolos.DOS_PUNTOS, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 13: 
            { System.out.println("Reconocio: " + yytext()); 
                                return new Symbol(Simbolos.PUNTO_COMA, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 14: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MAYOR, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 15: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MENOR, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 16: 
            { /*Ignora los espacios*/
            }
          case 71: break;
          case 17: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MENOS_MENOS, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 18: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MENOS_IGUAL, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 19: 
            { System.out.println("Reconocio: " + yytext() + " Literal");
                                return new Symbol(Simbolos.CADENA, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 20: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MAS_IGUAL, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 21: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MAS_MAS, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 22: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.POR_IGUAL, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 23: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.DIV_IGUAL, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 24: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.OR, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 25: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 26: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 27: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.TO, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 28: 
            { System.out.println("Reconocio: " + yytext()); 
                                return new Symbol(Simbolos.ASIGNAR, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 29: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MAYOR_IGUAL, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 30: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MENOR_IGUAL, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 31: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.DIFERENTE, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 32: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.END, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 33: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.AND, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 34: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.MOD, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 35: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.INT, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 36: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.NOT, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 37: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.DIV, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 38: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 39: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.VAR, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 40: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 41: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.READ, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 42: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.REAL, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 43: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.CHAR, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 44: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.THEN, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 45: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.BEGIN, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 46: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.CONST, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 47: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.WRITE, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 48: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 49: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.STRING, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 50: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.PROGRAM, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 51: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.BOOLEAN, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 52: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.LONGINT, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 53: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.FUNCION, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 54: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.SHORTINT, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 55: 
            { System.out.println("Reconocio: " + yytext());
                                return new Symbol(Simbolos.PROCEDURE, yycolumn, yyline, yytext());
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
