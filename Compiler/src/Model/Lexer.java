/* The following code was generated by JFlex 1.6.1 */

package Model;
import static Model.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/TEC/Compiladores/Proyecto/Compiler/src/Model/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\53\1\54\1\54\1\53\22\0\1\46\1\0\1\52"+
    "\1\51\4\0\1\41\1\42\1\37\1\32\1\31\1\33\1\44\1\40"+
    "\12\2\1\43\1\31\1\36\1\35\1\34\2\0\1\3\1\6\1\16"+
    "\1\21\1\7\1\23\1\10\1\20\1\11\1\1\1\26\1\14\1\27"+
    "\1\12\1\13\1\25\1\1\1\4\1\17\1\15\1\24\1\30\1\22"+
    "\1\45\1\5\1\1\1\31\1\0\1\31\3\0\32\1\1\47\1\0"+
    "\1\50\7\0\1\54\u1fa2\0\1\54\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\23\2\10\4\1\2\1\5"+
    "\3\1\1\2\1\0\11\2\2\6\2\2\1\4\13\2"+
    "\1\6\13\2\1\7\1\0\1\2\1\0\1\7\1\0"+
    "\1\3\1\0\1\3\1\2\1\3\1\2\1\4\6\2"+
    "\1\6\16\2\1\6\4\2\2\0\1\7\1\2\1\0"+
    "\1\2\1\6\22\2\1\0\1\6\15\2\1\6\10\2"+
    "\1\6\4\2\1\6\2\2\1\6\166\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\55"+
    "\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\55\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681"+
    "\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9"+
    "\0\u05fa\0\u0816\0\u0843\0\u05fa\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f"+
    "\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0573\0\u0d02"+
    "\0\u0d2f\0\u05a0\0\u05cd\0\55\0\u0d5c\0\u0d89\0\u0db6\0\u0d5c"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0d5c\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u0d02\0\55\0\u1275\0\u12a2\0\u12cf"+
    "\0\u1275\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572"+
    "\0\u159f\0\u15cc\0\u15f9\0\u05a0\0\u15f9\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8"+
    "\0\u1815\0\u1842\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923"+
    "\0\u1950\0\u197d\0\u19aa\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c"+
    "\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4"+
    "\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c"+
    "\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4"+
    "\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c"+
    "\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274"+
    "\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc"+
    "\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544"+
    "\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac"+
    "\0\u26d9\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814"+
    "\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c"+
    "\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4"+
    "\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c"+
    "\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4"+
    "\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c"+
    "\0\u2f49\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\3\1\21\1\22\1\23\1\24\1\25\1\3\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\30\1\34\1\35"+
    "\1\36\1\37\1\30\1\35\1\30\1\40\1\41\1\42"+
    "\1\2\1\43\1\44\1\41\57\0\30\45\14\0\1\45"+
    "\11\0\1\4\41\0\1\46\11\0\3\45\1\47\5\45"+
    "\1\50\16\45\14\0\1\45\10\0\6\45\1\51\21\45"+
    "\14\0\1\45\10\0\4\45\1\52\1\45\1\53\3\45"+
    "\1\54\15\45\14\0\1\45\10\0\11\45\1\55\1\45"+
    "\1\56\14\45\14\0\1\45\10\0\12\45\1\57\15\45"+
    "\14\0\1\45\10\0\11\45\1\60\10\45\1\61\5\45"+
    "\14\0\1\45\10\0\10\45\1\62\1\45\1\63\15\45"+
    "\14\0\1\45\10\0\3\45\1\64\16\45\1\61\5\45"+
    "\14\0\1\45\10\0\2\45\1\65\7\45\1\66\15\45"+
    "\14\0\1\45\10\0\3\45\1\67\1\70\5\45\1\61"+
    "\4\45\1\71\10\45\14\0\1\45\10\0\2\45\1\56"+
    "\7\45\1\72\4\45\1\73\10\45\14\0\1\45\10\0"+
    "\6\45\1\74\5\45\1\75\2\45\1\76\10\45\14\0"+
    "\1\45\10\0\10\45\1\77\1\45\1\100\15\45\14\0"+
    "\1\45\10\0\3\45\1\101\4\45\1\102\6\45\1\103"+
    "\10\45\14\0\1\45\10\0\2\45\1\104\5\45\1\105"+
    "\1\45\1\106\10\45\1\107\4\45\14\0\1\45\10\0"+
    "\11\45\1\110\16\45\14\0\1\45\10\0\2\45\1\111"+
    "\1\112\24\45\14\0\1\45\10\0\12\45\1\50\15\45"+
    "\14\0\1\45\10\0\2\45\1\113\25\45\14\0\1\45"+
    "\41\0\1\30\2\0\1\30\52\0\1\30\1\0\1\30"+
    "\53\0\1\35\1\30\53\0\2\30\1\35\53\0\1\30"+
    "\54\0\1\30\2\0\1\114\53\0\1\115\16\0\12\45"+
    "\1\116\15\45\14\0\1\45\7\0\50\117\1\120\2\117"+
    "\2\121\2\0\1\122\52\0\52\123\1\124\2\123\1\0"+
    "\30\125\14\0\1\125\11\0\1\126\53\0\3\125\1\127"+
    "\24\125\14\0\1\125\10\0\20\125\1\130\7\125\14\0"+
    "\1\125\10\0\2\125\1\131\12\125\1\132\6\125\1\133"+
    "\3\125\14\0\1\125\10\0\14\125\1\134\13\125\14\0"+
    "\1\125\10\0\7\125\1\135\20\125\14\0\1\125\10\0"+
    "\12\125\1\136\15\125\14\0\1\125\10\0\20\125\1\137"+
    "\7\125\14\0\1\125\10\0\16\125\1\134\11\125\14\0"+
    "\1\125\10\0\14\125\1\140\13\125\14\0\1\125\10\0"+
    "\13\125\1\141\1\137\13\125\14\0\1\125\10\0\13\125"+
    "\1\137\14\125\14\0\1\125\10\0\14\125\1\130\13\125"+
    "\14\0\1\125\10\0\5\125\1\142\22\125\14\0\1\125"+
    "\10\0\11\125\1\143\16\125\14\0\1\125\10\0\23\125"+
    "\1\134\4\125\14\0\1\125\10\0\24\125\1\134\3\125"+
    "\14\0\1\125\10\0\6\125\1\144\21\125\14\0\1\125"+
    "\10\0\11\125\1\145\16\125\14\0\1\125\10\0\2\125"+
    "\1\146\25\125\14\0\1\125\10\0\14\125\1\137\13\125"+
    "\14\0\1\125\10\0\3\125\1\147\24\125\14\0\1\125"+
    "\10\0\12\125\1\150\15\125\14\0\1\125\10\0\27\125"+
    "\1\130\14\0\1\125\10\0\21\125\1\151\6\125\14\0"+
    "\1\125\10\0\10\125\1\152\17\125\14\0\1\125\10\0"+
    "\14\125\1\153\13\125\14\0\1\125\10\0\10\125\1\154"+
    "\17\125\14\0\1\125\10\0\13\125\1\155\14\125\14\0"+
    "\1\125\10\0\13\125\1\134\14\125\14\0\1\125\10\0"+
    "\3\125\1\156\24\125\14\0\1\125\10\0\11\125\1\157"+
    "\16\125\14\0\1\125\10\0\14\125\1\160\13\125\14\0"+
    "\1\125\10\0\15\125\1\161\12\125\14\0\1\125\10\0"+
    "\12\125\1\162\15\125\14\0\1\125\10\0\3\125\1\137"+
    "\24\125\14\0\1\125\7\0\53\114\2\0\37\115\1\163"+
    "\15\115\1\0\3\125\1\130\24\125\14\0\1\125\7\0"+
    "\50\164\1\120\2\164\2\0\50\121\1\165\4\121\1\0"+
    "\30\166\14\0\1\166\11\0\1\126\4\0\1\167\46\0"+
    "\2\166\1\170\25\166\14\0\1\166\10\0\13\166\1\171"+
    "\4\166\1\171\7\166\14\0\1\166\10\0\12\166\1\172"+
    "\15\166\14\0\1\166\10\0\6\166\1\173\21\166\14\0"+
    "\1\166\10\0\6\166\1\171\21\166\14\0\1\166\10\0"+
    "\10\166\1\174\17\166\14\0\1\166\10\0\13\166\1\175"+
    "\14\166\14\0\1\166\10\0\12\166\1\171\15\166\14\0"+
    "\1\166\10\0\10\166\1\176\17\166\14\0\1\166\10\0"+
    "\6\166\1\177\21\166\14\0\1\166\10\0\7\166\1\200"+
    "\20\166\14\0\1\166\10\0\11\166\1\171\16\166\14\0"+
    "\1\166\10\0\16\166\1\201\11\166\14\0\1\166\10\0"+
    "\3\166\1\171\24\166\14\0\1\166\10\0\10\166\1\202"+
    "\17\166\14\0\1\166\10\0\3\166\1\203\24\166\14\0"+
    "\1\166\10\0\11\166\1\204\16\166\14\0\1\166\10\0"+
    "\14\166\1\205\13\166\14\0\1\166\10\0\17\166\1\171"+
    "\10\166\14\0\1\166\10\0\13\166\1\205\14\166\14\0"+
    "\1\166\10\0\16\166\1\205\11\166\14\0\1\166\10\0"+
    "\21\166\1\206\6\166\14\0\1\166\10\0\15\166\1\207"+
    "\12\166\14\0\1\166\10\0\10\166\1\177\17\166\14\0"+
    "\1\166\10\0\25\166\1\210\2\166\14\0\1\166\10\0"+
    "\7\166\1\211\5\166\1\212\12\166\14\0\1\166\7\0"+
    "\37\115\1\163\2\115\1\165\12\115\1\0\30\213\14\0"+
    "\1\213\11\0\1\122\30\0\1\214\22\0\4\213\1\215"+
    "\23\213\14\0\1\213\10\0\3\213\1\216\24\213\14\0"+
    "\1\213\10\0\2\213\1\217\25\213\14\0\1\213\10\0"+
    "\11\213\1\215\16\213\14\0\1\213\10\0\6\213\1\220"+
    "\21\213\14\0\1\213\10\0\11\213\1\221\16\213\14\0"+
    "\1\213\10\0\13\213\1\215\14\213\14\0\1\213\10\0"+
    "\10\213\1\222\17\213\14\0\1\213\10\0\14\213\1\215"+
    "\13\213\14\0\1\213\10\0\11\213\1\223\16\213\14\0"+
    "\1\213\10\0\14\213\1\224\13\213\14\0\1\213\10\0"+
    "\14\213\1\225\13\213\14\0\1\213\10\0\6\213\1\215"+
    "\21\213\14\0\1\213\10\0\2\213\1\226\25\213\14\0"+
    "\1\213\10\0\14\213\1\227\13\213\14\0\1\213\10\0"+
    "\6\213\1\216\21\213\14\0\1\213\10\0\3\213\1\230"+
    "\24\213\14\0\1\213\10\0\6\213\1\231\21\213\14\0"+
    "\1\213\10\0\30\232\14\0\1\232\10\0\20\232\1\233"+
    "\7\232\14\0\1\232\10\0\14\232\1\233\13\232\14\0"+
    "\1\232\10\0\2\232\1\234\25\232\14\0\1\232\10\0"+
    "\6\232\1\233\21\232\14\0\1\232\10\0\11\232\1\235"+
    "\16\232\14\0\1\232\10\0\7\232\1\233\20\232\14\0"+
    "\1\232\10\0\10\232\1\236\17\232\14\0\1\232\10\0"+
    "\12\232\1\233\15\232\14\0\1\232\10\0\3\232\1\237"+
    "\24\232\14\0\1\232\10\0\10\232\1\240\17\232\14\0"+
    "\1\232\10\0\2\232\1\241\25\232\14\0\1\232\10\0"+
    "\20\232\1\242\7\232\14\0\1\232\10\0\30\243\14\0"+
    "\1\243\10\0\11\243\1\244\16\243\14\0\1\243\10\0"+
    "\14\243\1\244\13\243\14\0\1\243\10\0\11\243\1\245"+
    "\16\243\14\0\1\243\10\0\20\243\1\244\7\243\14\0"+
    "\1\243\10\0\12\243\1\246\15\243\14\0\1\243\10\0"+
    "\26\243\1\244\1\243\14\0\1\243\10\0\23\243\1\247"+
    "\4\243\14\0\1\243\10\0\30\250\14\0\1\250\10\0"+
    "\14\250\1\251\13\250\14\0\1\250\10\0\11\250\1\251"+
    "\16\250\14\0\1\250\10\0\3\250\1\252\24\250\14\0"+
    "\1\250\10\0\30\253\14\0\1\253\10\0\6\253\1\254"+
    "\21\253\14\0\1\253\10\0\30\255\14\0\1\255\10\0"+
    "\30\256\14\0\1\256\10\0\30\257\14\0\1\257\10\0"+
    "\30\260\14\0\1\260\10\0\30\261\14\0\1\261\10\0"+
    "\30\262\14\0\1\262\10\0\30\263\14\0\1\263\10\0"+
    "\30\264\14\0\1\264\10\0\30\265\14\0\1\265\10\0"+
    "\30\266\14\0\1\266\10\0\30\267\14\0\1\267\10\0"+
    "\30\270\14\0\1\270\10\0\30\271\14\0\1\271\10\0"+
    "\30\272\14\0\1\272\10\0\30\273\14\0\1\273\10\0"+
    "\30\274\14\0\1\274\10\0\30\275\14\0\1\275\10\0"+
    "\30\276\14\0\1\276\10\0\30\277\14\0\1\277\10\0"+
    "\30\300\14\0\1\300\10\0\30\301\14\0\1\301\10\0"+
    "\30\302\14\0\1\302\10\0\30\303\14\0\1\303\10\0"+
    "\30\304\14\0\1\304\10\0\30\305\14\0\1\305\10\0"+
    "\30\306\14\0\1\306\10\0\30\307\14\0\1\307\10\0"+
    "\30\310\14\0\1\310\10\0\30\311\14\0\1\311\10\0"+
    "\30\312\14\0\1\312\10\0\30\313\14\0\1\313\10\0"+
    "\30\314\14\0\1\314\10\0\30\315\14\0\1\315\10\0"+
    "\30\316\14\0\1\316\10\0\30\317\14\0\1\317\10\0"+
    "\30\320\14\0\1\320\10\0\30\321\14\0\1\321\10\0"+
    "\30\322\14\0\1\322\10\0\30\323\14\0\1\323\10\0"+
    "\30\324\14\0\1\324\10\0\30\325\14\0\1\325\10\0"+
    "\30\326\14\0\1\326\10\0\30\327\14\0\1\327\10\0"+
    "\30\330\14\0\1\330\10\0\30\331\14\0\1\331\10\0"+
    "\30\332\14\0\1\332\10\0\30\333\14\0\1\333\10\0"+
    "\30\334\14\0\1\334\10\0\30\335\14\0\1\335\10\0"+
    "\30\336\14\0\1\336\10\0\30\337\14\0\1\337\10\0"+
    "\30\340\14\0\1\340\10\0\30\341\14\0\1\341\10\0"+
    "\30\342\14\0\1\342\10\0\30\343\14\0\1\343\10\0"+
    "\30\344\14\0\1\344\10\0\30\345\14\0\1\345\10\0"+
    "\30\346\14\0\1\346\10\0\30\347\14\0\1\347\10\0"+
    "\30\350\14\0\1\350\10\0\30\351\14\0\1\351\10\0"+
    "\30\352\14\0\1\352\10\0\30\353\14\0\1\353\10\0"+
    "\30\354\14\0\1\354\10\0\30\355\14\0\1\355\10\0"+
    "\30\356\14\0\1\356\10\0\30\357\14\0\1\357\10\0"+
    "\30\360\14\0\1\360\10\0\30\361\14\0\1\361\10\0"+
    "\30\362\14\0\1\362\10\0\30\363\14\0\1\363\10\0"+
    "\30\364\14\0\1\364\10\0\30\365\14\0\1\365\10\0"+
    "\30\366\14\0\1\366\10\0\30\367\14\0\1\367\10\0"+
    "\30\370\14\0\1\370\10\0\30\371\14\0\1\371\10\0"+
    "\30\372\14\0\1\372\10\0\30\373\14\0\1\373\10\0"+
    "\30\374\14\0\1\374\10\0\30\375\14\0\1\375\10\0"+
    "\30\376\14\0\1\376\10\0\30\377\14\0\1\377\10\0"+
    "\30\u0100\14\0\1\u0100\10\0\30\u0101\14\0\1\u0101\10\0"+
    "\30\u0102\14\0\1\u0102\10\0\30\u0103\14\0\1\u0103\10\0"+
    "\30\u0104\14\0\1\u0104\10\0\30\u0105\14\0\1\u0105\10\0"+
    "\30\u0106\14\0\1\u0106\10\0\30\u0107\14\0\1\u0107\10\0"+
    "\30\u0108\14\0\1\u0108\10\0\30\u0109\14\0\1\u0109\10\0"+
    "\30\u010a\14\0\1\u010a\10\0\30\u010b\14\0\1\u010b\10\0"+
    "\30\u010c\14\0\1\u010c\10\0\30\u010d\14\0\1\u010d\10\0"+
    "\30\u010e\14\0\1\u010e\10\0\30\u010f\14\0\1\u010f\10\0"+
    "\30\u0110\14\0\1\u0110\10\0\30\u0111\14\0\1\u0111\10\0"+
    "\30\u0112\14\0\1\u0112\10\0\30\u0113\14\0\1\u0113\10\0"+
    "\30\u0114\14\0\1\u0114\10\0\30\u0115\14\0\1\u0115\10\0"+
    "\30\u0116\14\0\1\u0116\10\0\30\u0117\14\0\1\u0117\10\0"+
    "\30\u0118\14\0\1\u0118\10\0\30\u0119\14\0\1\u0119\10\0"+
    "\30\u011a\14\0\1\u011a\10\0\30\u011b\14\0\1\u011b\10\0"+
    "\30\u011c\14\0\1\u011c\10\0\30\u011d\14\0\1\u011d\10\0"+
    "\30\u011e\14\0\1\u011e\10\0\30\u011f\14\0\1\u011f\10\0"+
    "\30\u0120\14\0\1\u0120\10\0\30\u0121\14\0\1\u0121\10\0"+
    "\30\u0122\14\0\1\u0122\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\11\10\1\1\11\4\1\1\0"+
    "\46\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\11\36\1\2\0\1\11\1\1\1\0\24\1\1\0"+
    "\225\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { line = yyline; lexeme = yytext(); return ERROR;
            }
          case 8: break;
          case 2: 
            { line = yyline; lexeme = yytext(); return Identificador;
            }
          case 9: break;
          case 3: 
            { line = yyline; lexeme = yytext(); return Literal;
            }
          case 10: break;
          case 4: 
            { line = yyline; lexeme = yytext(); return Operator;
            }
          case 11: break;
          case 5: 
            { /*Ignore*/
            }
          case 12: break;
          case 6: 
            { line = yyline; lexeme = yytext(); return Reserved_Word;
            }
          case 13: break;
          case 7: 
            { line = yyline; lexeme = yytext(); return Comment;
            }
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
